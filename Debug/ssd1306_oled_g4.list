
ssd1306_oled_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  2000006c  08007210  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08007210  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e2e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db3  00000000  00000000  00036f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001011  00000000  00000000  0003b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d8d  00000000  00000000  0003c141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019406  00000000  00000000  0003eece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9588  00000000  00000000  000582d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  0012185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001274bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005c34 	.word	0x08005c34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005c34 	.word	0x08005c34

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005c2:	f000 fa21 	bl	8000a08 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005ca:	2201      	movs	r2, #1
 80005cc:	2178      	movs	r1, #120	; 0x78
 80005ce:	485b      	ldr	r0, [pc, #364]	; (800073c <SSD1306_Init+0x180>)
 80005d0:	f001 fc72 	bl	8001eb8 <HAL_I2C_IsDeviceReady>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	e0a9      	b.n	8000732 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005de:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005e4:	e002      	b.n	80005ec <SSD1306_Init+0x30>
		p--;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f9      	bne.n	80005e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005f2:	22ae      	movs	r2, #174	; 0xae
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa82 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80005fc:	2220      	movs	r2, #32
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa7d 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000606:	2210      	movs	r2, #16
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa78 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000610:	22b0      	movs	r2, #176	; 0xb0
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa73 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800061a:	22c8      	movs	r2, #200	; 0xc8
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 fa6e 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2078      	movs	r0, #120	; 0x78
 800062a:	f000 fa69 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800062e:	2210      	movs	r2, #16
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 fa64 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 fa5f 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000642:	2281      	movs	r2, #129	; 0x81
 8000644:	2100      	movs	r1, #0
 8000646:	2078      	movs	r0, #120	; 0x78
 8000648:	f000 fa5a 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800064c:	22ff      	movs	r2, #255	; 0xff
 800064e:	2100      	movs	r1, #0
 8000650:	2078      	movs	r0, #120	; 0x78
 8000652:	f000 fa55 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000656:	22a1      	movs	r2, #161	; 0xa1
 8000658:	2100      	movs	r1, #0
 800065a:	2078      	movs	r0, #120	; 0x78
 800065c:	f000 fa50 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000660:	22a6      	movs	r2, #166	; 0xa6
 8000662:	2100      	movs	r1, #0
 8000664:	2078      	movs	r0, #120	; 0x78
 8000666:	f000 fa4b 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800066a:	22a8      	movs	r2, #168	; 0xa8
 800066c:	2100      	movs	r1, #0
 800066e:	2078      	movs	r0, #120	; 0x78
 8000670:	f000 fa46 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000674:	223f      	movs	r2, #63	; 0x3f
 8000676:	2100      	movs	r1, #0
 8000678:	2078      	movs	r0, #120	; 0x78
 800067a:	f000 fa41 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800067e:	22a4      	movs	r2, #164	; 0xa4
 8000680:	2100      	movs	r1, #0
 8000682:	2078      	movs	r0, #120	; 0x78
 8000684:	f000 fa3c 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000688:	22d3      	movs	r2, #211	; 0xd3
 800068a:	2100      	movs	r1, #0
 800068c:	2078      	movs	r0, #120	; 0x78
 800068e:	f000 fa37 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f000 fa32 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800069c:	22d5      	movs	r2, #213	; 0xd5
 800069e:	2100      	movs	r1, #0
 80006a0:	2078      	movs	r0, #120	; 0x78
 80006a2:	f000 fa2d 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80006a6:	22f0      	movs	r2, #240	; 0xf0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2078      	movs	r0, #120	; 0x78
 80006ac:	f000 fa28 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006b0:	22d9      	movs	r2, #217	; 0xd9
 80006b2:	2100      	movs	r1, #0
 80006b4:	2078      	movs	r0, #120	; 0x78
 80006b6:	f000 fa23 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006ba:	2222      	movs	r2, #34	; 0x22
 80006bc:	2100      	movs	r1, #0
 80006be:	2078      	movs	r0, #120	; 0x78
 80006c0:	f000 fa1e 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006c4:	22da      	movs	r2, #218	; 0xda
 80006c6:	2100      	movs	r1, #0
 80006c8:	2078      	movs	r0, #120	; 0x78
 80006ca:	f000 fa19 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006ce:	2212      	movs	r2, #18
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	; 0x78
 80006d4:	f000 fa14 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006d8:	22db      	movs	r2, #219	; 0xdb
 80006da:	2100      	movs	r1, #0
 80006dc:	2078      	movs	r0, #120	; 0x78
 80006de:	f000 fa0f 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006e2:	2220      	movs	r2, #32
 80006e4:	2100      	movs	r1, #0
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 fa0a 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006ec:	228d      	movs	r2, #141	; 0x8d
 80006ee:	2100      	movs	r1, #0
 80006f0:	2078      	movs	r0, #120	; 0x78
 80006f2:	f000 fa05 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006f6:	2214      	movs	r2, #20
 80006f8:	2100      	movs	r1, #0
 80006fa:	2078      	movs	r0, #120	; 0x78
 80006fc:	f000 fa00 	bl	8000b00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000700:	22af      	movs	r2, #175	; 0xaf
 8000702:	2100      	movs	r1, #0
 8000704:	2078      	movs	r0, #120	; 0x78
 8000706:	f000 f9fb 	bl	8000b00 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800070a:	222e      	movs	r2, #46	; 0x2e
 800070c:	2100      	movs	r1, #0
 800070e:	2078      	movs	r0, #120	; 0x78
 8000710:	f000 f9f6 	bl	8000b00 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f843 	bl	80007a0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800071a:	f000 f813 	bl	8000744 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <SSD1306_Init+0x184>)
 8000720:	2200      	movs	r2, #0
 8000722:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <SSD1306_Init+0x184>)
 8000726:	2200      	movs	r2, #0
 8000728:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <SSD1306_Init+0x184>)
 800072c:	2201      	movs	r2, #1
 800072e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000730:	2301      	movs	r3, #1
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000490 	.word	0x20000490
 8000740:	20000488 	.word	0x20000488

08000744 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e01d      	b.n	800078c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b50      	subs	r3, #80	; 0x50
 8000754:	b2db      	uxtb	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	2078      	movs	r0, #120	; 0x78
 800075c:	f000 f9d0 	bl	8000b00 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2078      	movs	r0, #120	; 0x78
 8000766:	f000 f9cb 	bl	8000b00 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800076a:	2210      	movs	r2, #16
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	; 0x78
 8000770:	f000 f9c6 	bl	8000b00 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	01db      	lsls	r3, r3, #7
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <SSD1306_UpdateScreen+0x58>)
 800077a:	441a      	add	r2, r3
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	2078      	movs	r0, #120	; 0x78
 8000782:	f000 f957 	bl	8000a34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	3301      	adds	r3, #1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b07      	cmp	r3, #7
 8000790:	d9de      	bls.n	8000750 <SSD1306_UpdateScreen+0xc>
	}
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000088 	.word	0x20000088

080007a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <SSD1306_Fill+0x14>
 80007b0:	2300      	movs	r3, #0
 80007b2:	e000      	b.n	80007b6 <SSD1306_Fill+0x16>
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ba:	4619      	mov	r1, r3
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <SSD1306_Fill+0x2c>)
 80007be:	f004 fdb5 	bl	800532c <memset>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000088 	.word	0x20000088

080007d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
 80007da:	460b      	mov	r3, r1
 80007dc:	80bb      	strh	r3, [r7, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	70fb      	strb	r3, [r7, #3]
	if (
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2b7f      	cmp	r3, #127	; 0x7f
 80007e6:	d848      	bhi.n	800087a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	2b3f      	cmp	r3, #63	; 0x3f
 80007ec:	d845      	bhi.n	800087a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <SSD1306_DrawPixel+0xb8>)
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf0c      	ite	eq
 80007fc:	2301      	moveq	r3, #1
 80007fe:	2300      	movne	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d11a      	bne.n	8000840 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b298      	uxth	r0, r3
 8000812:	4603      	mov	r3, r0
 8000814:	01db      	lsls	r3, r3, #7
 8000816:	4413      	add	r3, r2
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <SSD1306_DrawPixel+0xbc>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	b25a      	sxtb	r2, r3
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b259      	sxtb	r1, r3
 8000830:	88fa      	ldrh	r2, [r7, #6]
 8000832:	4603      	mov	r3, r0
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	4413      	add	r3, r2
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <SSD1306_DrawPixel+0xbc>)
 800083c:	54d1      	strb	r1, [r2, r3]
 800083e:	e01d      	b.n	800087c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000840:	88fa      	ldrh	r2, [r7, #6]
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	b298      	uxth	r0, r3
 8000848:	4603      	mov	r3, r0
 800084a:	01db      	lsls	r3, r3, #7
 800084c:	4413      	add	r3, r2
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <SSD1306_DrawPixel+0xbc>)
 8000850:	5cd3      	ldrb	r3, [r2, r3]
 8000852:	b25a      	sxtb	r2, r3
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	b25b      	sxtb	r3, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	4013      	ands	r3, r2
 8000868:	b259      	sxtb	r1, r3
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	4603      	mov	r3, r0
 800086e:	01db      	lsls	r3, r3, #7
 8000870:	4413      	add	r3, r2
 8000872:	b2c9      	uxtb	r1, r1
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <SSD1306_DrawPixel+0xbc>)
 8000876:	54d1      	strb	r1, [r2, r3]
 8000878:	e000      	b.n	800087c <SSD1306_DrawPixel+0xac>
		return;
 800087a:	bf00      	nop
	}
}
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000488 	.word	0x20000488
 800088c:	20000088 	.word	0x20000088

08000890 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	80fb      	strh	r3, [r7, #6]
 800089c:	4613      	mov	r3, r2
 800089e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SSD1306_GotoXY+0x28>)
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <SSD1306_GotoXY+0x28>)
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	8053      	strh	r3, [r2, #2]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000488 	.word	0x20000488

080008bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <SSD1306_Putc+0xfc>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
	if (
 80008d8:	2b7f      	cmp	r3, #127	; 0x7f
 80008da:	dc07      	bgt.n	80008ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <SSD1306_Putc+0xfc>)
 80008de:	885b      	ldrh	r3, [r3, #2]
 80008e0:	461a      	mov	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008e8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ea:	dd01      	ble.n	80008f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	e05e      	b.n	80009ae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e04b      	b.n	800098e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	3b20      	subs	r3, #32
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	7849      	ldrb	r1, [r1, #1]
 8000902:	fb01 f303 	mul.w	r3, r1, r3
 8000906:	4619      	mov	r1, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	440b      	add	r3, r1
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	e030      	b.n	800097c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d010      	beq.n	800094c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <SSD1306_Putc+0xfc>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	b298      	uxth	r0, r3
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <SSD1306_Putc+0xfc>)
 8000938:	885a      	ldrh	r2, [r3, #2]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	b29b      	uxth	r3, r3
 800093e:	4413      	add	r3, r2
 8000940:	b29b      	uxth	r3, r3
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff ff43 	bl	80007d0 <SSD1306_DrawPixel>
 800094a:	e014      	b.n	8000976 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <SSD1306_Putc+0xfc>)
 800094e:	881a      	ldrh	r2, [r3, #0]
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4413      	add	r3, r2
 8000956:	b298      	uxth	r0, r3
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <SSD1306_Putc+0xfc>)
 800095a:	885a      	ldrh	r2, [r3, #2]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	b29b      	uxth	r3, r3
 8000960:	4413      	add	r3, r2
 8000962:	b299      	uxth	r1, r3
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b00      	cmp	r3, #0
 8000968:	bf0c      	ite	eq
 800096a:	2301      	moveq	r3, #1
 800096c:	2300      	movne	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	f7ff ff2d 	bl	80007d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	3301      	adds	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	4293      	cmp	r3, r2
 8000986:	d3c8      	bcc.n	800091a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3301      	adds	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	461a      	mov	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4293      	cmp	r3, r2
 8000998:	d3ad      	bcc.n	80008f6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <SSD1306_Putc+0xfc>)
 800099c:	881a      	ldrh	r2, [r3, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4413      	add	r3, r2
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <SSD1306_Putc+0xfc>)
 80009aa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000488 	.word	0x20000488

080009bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009ca:	e012      	b.n	80009f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff71 	bl	80008bc <SSD1306_Putc>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d002      	beq.n	80009ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	e008      	b.n	80009fe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1e8      	bne.n	80009cc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	781b      	ldrb	r3, [r3, #0]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <ssd1306_I2C_Init+0x28>)
 8000a10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a12:	e002      	b.n	8000a1a <ssd1306_I2C_Init+0x12>
		p--;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f9      	bne.n	8000a14 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	0003d090 	.word	0x0003d090

08000a34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b0c7      	sub	sp, #284	; 0x11c
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a42:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a4e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a52:	4622      	mov	r2, r4
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a5a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a5e:	4602      	mov	r2, r0
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a7a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000a7e:	7812      	ldrb	r2, [r2, #0]
 8000a80:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a88:	e015      	b.n	8000ab6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	441a      	add	r2, r3
 8000a9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	7811      	ldrb	r1, [r2, #0]
 8000aa2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000aa6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000aaa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000aac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ab6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ac0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d8df      	bhi.n	8000a8a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ace:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f107 020c 	add.w	r2, r7, #12
 8000ae8:	200a      	movs	r0, #10
 8000aea:	9000      	str	r0, [sp, #0]
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <ssd1306_I2C_WriteMulti+0xc8>)
 8000aee:	f001 f8cb 	bl	8001c88 <HAL_I2C_Master_Transmit>
}
 8000af2:	bf00      	nop
 8000af4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000490 	.word	0x20000490

08000b00 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	71bb      	strb	r3, [r7, #6]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b16:	797b      	ldrb	r3, [r7, #5]
 8000b18:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	b299      	uxth	r1, r3
 8000b1e:	f107 020c 	add.w	r2, r7, #12
 8000b22:	230a      	movs	r3, #10
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2302      	movs	r3, #2
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <ssd1306_I2C_Write+0x38>)
 8000b2a:	f001 f8ad 	bl	8001c88 <HAL_I2C_Master_Transmit>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000490 	.word	0x20000490

08000b3c <SSD1306_Puts_Num>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSD1306_Puts_Num(int num){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	char number[]="";
 8000b44:	2300      	movs	r3, #0
 8000b46:	733b      	strb	r3, [r7, #12]

//	  int i = 247593;
//	  char str[10];

	  sprintf(number, "%d", num);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4907      	ldr	r1, [pc, #28]	; (8000b6c <SSD1306_Puts_Num+0x30>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fbcb 	bl	80052ec <siprintf>
	  SSD1306_Puts(number,&Font_7x10,1);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4904      	ldr	r1, [pc, #16]	; (8000b70 <SSD1306_Puts_Num+0x34>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff2c 	bl	80009bc <SSD1306_Puts>

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	08005c4c 	.word	0x08005c4c
 8000b70:	20000000 	.word	0x20000000

08000b74 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d123      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x5a>
        seconds++;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b8e:	6013      	str	r3, [r2, #0]
        if (seconds >= 60) {
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b3b      	cmp	r3, #59	; 0x3b
 8000b96:	d91a      	bls.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x5a>
            seconds = 0;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
            minutes++;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ba6:	6013      	str	r3, [r2, #0]
            if (minutes >= 60) {
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b3b      	cmp	r3, #59	; 0x3b
 8000bae:	d90e      	bls.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x5a>
                minutes = 0;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
                hours++;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bbe:	6013      	str	r3, [r2, #0]
                if (hours >= 24) {
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b17      	cmp	r3, #23
 8000bc6:	d902      	bls.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x5a>
                    hours = 0;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200005c4 	.word	0x200005c4
 8000be0:	200005c8 	.word	0x200005c8
 8000be4:	200005cc 	.word	0x200005cc

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 fbbc 	bl	800136a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f865 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 f989 	bl	8000f0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bfa:	f000 f93b 	bl	8000e74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bfe:	f000 f8ab 	bl	8000d58 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c02:	f000 f8e9 	bl	8000dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8000c06:	f7ff fcd9 	bl	80005bc <SSD1306_Init>
  char msg[] ="I l";
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <main+0xbc>)
 8000c0c:	603b      	str	r3, [r7, #0]
  SSD1306_GotoXY (37,0); // goto 10, 10 //x and y axis of the display
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2025      	movs	r0, #37	; 0x25
 8000c12:	f7ff fe3d 	bl	8000890 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000c16:	2201      	movs	r2, #1
 8000c18:	4923      	ldr	r1, [pc, #140]	; (8000ca8 <main+0xc0>)
 8000c1a:	4824      	ldr	r0, [pc, #144]	; (8000cac <main+0xc4>)
 8000c1c:	f7ff fece 	bl	80009bc <SSD1306_Puts>
  SSD1306_GotoXY (0, 25);
 8000c20:	2119      	movs	r1, #25
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fe34 	bl	8000890 <SSD1306_GotoXY>
  SSD1306_Puts (msg, &Font_7x10, 1);
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4920      	ldr	r1, [pc, #128]	; (8000cb0 <main+0xc8>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fec4 	bl	80009bc <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000c34:	f7ff fd86 	bl	8000744 <SSD1306_UpdateScreen>
  int count=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SSD1306_GotoXY (20, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f7ff fe26 	bl	8000890 <SSD1306_GotoXY>
	  SSD1306_Puts_Num(hours);
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <main+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff77 	bl	8000b3c <SSD1306_Puts_Num>
	  SSD1306_GotoXY (40, 0);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f7ff fe1d 	bl	8000890 <SSD1306_GotoXY>
	  SSD1306_Puts_Num(minutes);
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <main+0xd0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff6e 	bl	8000b3c <SSD1306_Puts_Num>
	  SSD1306_GotoXY (60, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	203c      	movs	r0, #60	; 0x3c
 8000c64:	f7ff fe14 	bl	8000890 <SSD1306_GotoXY>
	  SSD1306_Puts_Num(seconds);
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <main+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff65 	bl	8000b3c <SSD1306_Puts_Num>
////		  SSD1306_GotoXY (50, 45);
////		  SSD1306_Puts_Num(i);
////		  SSD1306_UpdateScreen(); // update screen
//		  HAL_Delay(1000);
//	  }
if(!HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 8000c72:	2102      	movs	r1, #2
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 ff3a 	bl	8001af0 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1dc      	bne.n	8000c3c <main+0x54>
{
	SSD1306_GotoXY (50, 45);
 8000c82:	212d      	movs	r1, #45	; 0x2d
 8000c84:	2032      	movs	r0, #50	; 0x32
 8000c86:	f7ff fe03 	bl	8000890 <SSD1306_GotoXY>
	count++;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY (50, 45);
 8000c90:	212d      	movs	r1, #45	; 0x2d
 8000c92:	2032      	movs	r0, #50	; 0x32
 8000c94:	f7ff fdfc 	bl	8000890 <SSD1306_GotoXY>
	SSD1306_Puts_Num(count);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff4f 	bl	8000b3c <SSD1306_Puts_Num>
	SSD1306_UpdateScreen(); // update screen
 8000c9e:	f7ff fd51 	bl	8000744 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (20, 0);
 8000ca2:	e7cb      	b.n	8000c3c <main+0x54>
 8000ca4:	006c2049 	.word	0x006c2049
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	08005c50 	.word	0x08005c50
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	200005cc 	.word	0x200005cc
 8000cb8:	200005c8 	.word	0x200005c8
 8000cbc:	200005c4 	.word	0x200005c4

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2238      	movs	r2, #56	; 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fb2c 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f001 fc86 	bl	80025f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d02:	2355      	movs	r3, #85	; 0x55
 8000d04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fd20 	bl	800275c <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d22:	f000 f94f 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f81e 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 f93b 	bl	8000fc4 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	; 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <MX_I2C1_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <MX_I2C1_Init+0x7c>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000d94:	f000 fedc 	bl	8001b50 <HAL_I2C_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d9e:	f000 f911 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000da6:	f001 fb8d 	bl	80024c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db0:	f000 f908 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_I2C1_Init+0x74>)
 8000db8:	f001 fbcf 	bl	800255a <HAL_I2CEx_ConfigDigitalFilter>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 f8ff 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000490 	.word	0x20000490
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	10802d9b 	.word	0x10802d9b

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e00:	22a9      	movs	r2, #169	; 0xa9
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e20:	f002 fbba 	bl	8003598 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e2a:	f000 f8cb 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e3c:	f002 fd52 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e46:	f000 f8bd 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e58:	f002 ff9e 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e62:	f000 f8af 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200004e4 	.word	0x200004e4

08000e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e7a:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <MX_USART2_UART_Init+0x94>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ebe:	f003 f833 	bl	8003f28 <HAL_UART_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f000 f87c 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ed0:	f004 f941 	bl	8005156 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eda:	f000 f873 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ee2:	f004 f976 	bl	80051d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000eec:	f000 f86a 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_USART2_UART_Init+0x90>)
 8000ef2:	f004 f8f7 	bl	80050e4 <HAL_UARTEx_DisableFifoMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f000 f862 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000530 	.word	0x20000530
 8000f08:	40004400 	.word	0x40004400

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_GPIO_Init+0xb0>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <MX_GPIO_Init+0xb4>)
 8000f5a:	f000 fde1 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f000 fc39 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_Pin */
  GPIO_InitStruct.Pin = RIGHT_Pin;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f000 fc2c 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_GPIO_Init+0xb4>)
 8000fae:	f000 fc1d 	bl	80017ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x44>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x44>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001006:	f001 fb99 	bl	800273c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09c      	sub	sp, #112	; 0x70
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	2244      	movs	r2, #68	; 0x44
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 f977 	bl	800532c <memset>
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_I2C_MspInit+0xe0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d153      	bne.n	80010f0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f8af 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001060:	f7ff ffb0 	bl	8000fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	4a24      	ldr	r2, [pc, #144]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f000 fb9a 	bl	80017ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <HAL_I2C_MspInit+0xe8>)
 80010d4:	f000 fb8a 	bl	80017ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 80010de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e2:	6593      	str	r3, [r2, #88]	; 0x58
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_I2C_MspInit+0xe4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3770      	adds	r7, #112	; 0x70
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201c      	movs	r0, #28
 8001134:	f000 fa65 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f000 fa7c 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b09a      	sub	sp, #104	; 0x68
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2244      	movs	r2, #68	; 0x44
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f8dd 	bl	800532c <memset>
  if(huart->Instance==USART2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_UART_MspInit+0xb8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13e      	bne.n	80011fa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f815 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff ff16 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_UART_MspInit+0xbc>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_UART_MspInit+0xbc>)
 800119e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a2:	6593      	str	r3, [r2, #88]	; 0x58
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_UART_MspInit+0xbc>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0xbc>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_UART_MspInit+0xbc>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_UART_MspInit+0xbc>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80011c8:	230c      	movs	r3, #12
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d8:	2307      	movs	r3, #7
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f000 fb01 	bl	80017ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2026      	movs	r0, #38	; 0x26
 80011f0:	f000 fa07 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f4:	2026      	movs	r0, #38	; 0x26
 80011f6:	f000 fa1e 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3768      	adds	r7, #104	; 0x68
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004400 	.word	0x40004400
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8da 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM2_IRQHandler+0x10>)
 8001266:	f002 f9ee 	bl	8003646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200004e4 	.word	0x200004e4

08001274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USART2_IRQHandler+0x10>)
 800127a:	f002 fea5 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000530 	.word	0x20000530

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f004 f840 	bl	800533c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20008000 	.word	0x20008000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	200005d0 	.word	0x200005d0
 80012f0:	20000720 	.word	0x20000720

080012f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800131a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff ffea 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <LoopForever+0x6>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <LoopForever+0xe>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	; (8001364 <LoopForever+0x16>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f003 ffff 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134a:	f7ff fc4d 	bl	8000be8 <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   r0, =_estack
 8001350:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800135c:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8001360:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001364:	20000720 	.word	0x20000720

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>

0800136a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f939 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f80e 	bl	800139c <HAL_InitTick>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	e001      	b.n	8001390 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138c:	f7ff fe20 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001390:	79fb      	ldrb	r3, [r7, #7]

}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_InitTick+0x68>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d022      	beq.n	80013f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_InitTick+0x6c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_InitTick+0x68>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f944 	bl	8001652 <HAL_SYSTICK_Config>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	d809      	bhi.n	80013ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d6:	2200      	movs	r2, #0
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	f04f 30ff 	mov.w	r0, #4294967295
 80013de:	f000 f910 	bl	8001602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_InitTick+0x70>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e007      	b.n	80013fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e004      	b.n	80013fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e001      	b.n	80013fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000018 	.word	0x20000018
 8001408:	20000010 	.word	0x20000010
 800140c:	20000014 	.word	0x20000014

08001410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x1c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_IncTick+0x20>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4413      	add	r3, r2
 800141e:	4a03      	ldr	r2, [pc, #12]	; (800142c <HAL_IncTick+0x1c>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	200005d4 	.word	0x200005d4
 8001430:	20000018 	.word	0x20000018

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200005d4 	.word	0x200005d4

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff40 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff33 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa4 	bl	80015a8 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d005      	beq.n	800168e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e037      	b.n	80016fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 020e 	bic.w	r2, r2, #14
 800169c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 021f 	and.w	r2, r3, #31
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00c      	beq.n	80016fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d00d      	beq.n	8001750 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e047      	b.n	80017e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800179c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
    }
  }
  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017fa:	e15a      	b.n	8001ab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 814c 	beq.w	8001aac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d005      	beq.n	800182c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001828:	2b02      	cmp	r3, #2
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d017      	beq.n	80018ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d123      	bne.n	800191e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	6939      	ldr	r1, [r7, #16]
 800191a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80a6 	beq.w	8001aac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_GPIO_Init+0x2e4>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	4a5a      	ldr	r2, [pc, #360]	; (8001ad0 <HAL_GPIO_Init+0x2e4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6613      	str	r3, [r2, #96]	; 0x60
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_GPIO_Init+0x2e4>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001978:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <HAL_GPIO_Init+0x2e8>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019a2:	d01f      	beq.n	80019e4 <HAL_GPIO_Init+0x1f8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_GPIO_Init+0x2ec>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d019      	beq.n	80019e0 <HAL_GPIO_Init+0x1f4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_GPIO_Init+0x2f0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_GPIO_Init+0x1f0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2f4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <HAL_GPIO_Init+0x1ec>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2f8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1e8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_GPIO_Init+0x2fc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_GPIO_Init+0x1e4>
 80019cc:	2305      	movs	r3, #5
 80019ce:	e00a      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019d0:	2306      	movs	r3, #6
 80019d2:	e008      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019d8:	2303      	movs	r3, #3
 80019da:	e004      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019dc:	2302      	movs	r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019e4:	2300      	movs	r3, #0
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f6:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <HAL_GPIO_Init+0x2e8>)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a28:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a52:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_GPIO_Init+0x300>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f47f ae9d 	bne.w	80017fc <HAL_GPIO_Init+0x10>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000c00 	.word	0x48000c00
 8001ae4:	48001000 	.word	0x48001000
 8001ae8:	48001400 	.word	0x48001400
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e08d      	b.n	8001c7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fa4e 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	e006      	b.n	8001bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d108      	bne.n	8001bf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	e007      	b.n	8001c02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69d9      	ldr	r1, [r3, #28]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	817b      	strh	r3, [r7, #10]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	f040 80fd 	bne.w	8001ea4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x30>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0f6      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc0:	f7ff fbb8 	bl	8001434 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2319      	movs	r3, #25
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa00 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e1      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2210      	movs	r2, #16
 8001cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	893a      	ldrh	r2, [r7, #8]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2bff      	cmp	r3, #255	; 0xff
 8001d12:	d906      	bls.n	8001d22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22ff      	movs	r2, #255	; 0xff
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e007      	b.n	8001d32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d024      	beq.n	8001d84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_I2C_Master_Transmit+0x228>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fb6f 	bl	8002460 <I2C_TransferConfig>
 8001d82:	e066      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_I2C_Master_Transmit+0x228>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fb64 	bl	8002460 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d98:	e05b      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f9f3 	bl	800218a <I2C_WaitOnTXISFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07b      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d034      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x1ca>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d130      	bne.n	8001e52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f96c 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e04d      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2bff      	cmp	r3, #255	; 0xff
 8001e12:	d90e      	bls.n	8001e32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	8979      	ldrh	r1, [r7, #10]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fb18 	bl	8002460 <I2C_TransferConfig>
 8001e30:	e00f      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	8979      	ldrh	r1, [r7, #10]
 8001e44:	2300      	movs	r3, #0
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fb07 	bl	8002460 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d19e      	bne.n	8001d9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	6a39      	ldr	r1, [r7, #32]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f9d9 	bl	8002218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e01a      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2220      	movs	r2, #32
 8001e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_I2C_Master_Transmit+0x22c>)
 8001e84:	400b      	ands	r3, r1
 8001e86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	80002000 	.word	0x80002000
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	f040 80d6 	bne.w	8002086 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0cc      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_IsDeviceReady+0x44>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0c5      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_I2C_IsDeviceReady+0x72>
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f28:	e006      	b.n	8001f38 <HAL_I2C_IsDeviceReady+0x80>
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fa79 	bl	8001434 <HAL_GetTick>
 8001f42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f70:	e034      	b.n	8001fdc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d01a      	beq.n	8001fb0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff fa5b 	bl	8001434 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <HAL_I2C_IsDeviceReady+0xd8>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e06b      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_I2C_IsDeviceReady+0x130>
 8001fe2:	7fbb      	ldrb	r3, [r7, #30]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0c4      	beq.n	8001f72 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d01a      	beq.n	800202c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2120      	movs	r1, #32
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f869 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e03b      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2220      	movs	r2, #32
 8002016:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e02d      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	2120      	movs	r1, #32
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f84e 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e020      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2220      	movs	r2, #32
 8002054:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	f63f af56 	bhi.w	8001f12 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d103      	bne.n	80020ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d007      	beq.n	80020cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	619a      	str	r2, [r3, #24]
  }
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e8:	e03b      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f8d6 	bl	80022a0 <I2C_IsErrorOccurred>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e041      	b.n	8002182 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d02d      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002106:	f7ff f995 	bl	8001434 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d302      	bcc.n	800211c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d122      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4013      	ands	r3, r2
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	429a      	cmp	r2, r3
 8002138:	d113      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	429a      	cmp	r2, r3
 800217e:	d0b4      	beq.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002196:	e033      	b.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f87f 	bl	80022a0 <I2C_IsErrorOccurred>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e031      	b.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d025      	beq.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7ff f93e 	bl	8001434 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11a      	bne.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d013      	beq.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d1c4      	bne.n	8002198 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	e02f      	b.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f838 	bl	80022a0 <I2C_IsErrorOccurred>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e02d      	b.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223a:	f7ff f8fb 	bl	8001434 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11a      	bne.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b20      	cmp	r3, #32
 800225c:	d013      	beq.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b20      	cmp	r3, #32
 8002292:	d1c8      	bne.n	8002226 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d068      	beq.n	800239e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2210      	movs	r2, #16
 80022d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022d4:	e049      	b.n	800236a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d045      	beq.n	800236a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7ff f8a9 	bl	8001434 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_IsErrorOccurred+0x54>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d13a      	bne.n	800236a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002306:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002316:	d121      	bne.n	800235c <I2C_IsErrorOccurred+0xbc>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800231e:	d01d      	beq.n	800235c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b20      	cmp	r3, #32
 8002324:	d01a      	beq.n	800235c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002334:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002336:	f7ff f87d 	bl	8001434 <HAL_GetTick>
 800233a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233c:	e00e      	b.n	800235c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800233e:	f7ff f879 	bl	8001434 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b19      	cmp	r3, #25
 800234a:	d907      	bls.n	800235c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800235a:	e006      	b.n	800236a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b20      	cmp	r3, #32
 8002368:	d1e9      	bne.n	800233e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b20      	cmp	r3, #32
 8002376:	d003      	beq.n	8002380 <I2C_IsErrorOccurred+0xe0>
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0aa      	beq.n	80022d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2220      	movs	r2, #32
 800238e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff fe3b 	bl	8002090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <I2C_IsErrorOccurred+0x1bc>)
 8002426:	400b      	ands	r3, r1
 8002428:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800244e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002452:	4618      	mov	r0, r3
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	fe00e800 	.word	0xfe00e800

08002460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	4613      	mov	r3, r2
 8002470:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002478:	7a7b      	ldrb	r3, [r7, #9]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002480:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	4313      	orrs	r3, r2
 800248a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800248e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	0d5b      	lsrs	r3, r3, #21
 800249a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <I2C_TransferConfig+0x60>)
 80024a0:	430b      	orrs	r3, r1
 80024a2:	43db      	mvns	r3, r3
 80024a4:	ea02 0103 	and.w	r1, r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	03ff63ff 	.word	0x03ff63ff

080024c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d138      	bne.n	800254c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e032      	b.n	800254e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b20      	cmp	r3, #32
 800256e:	d139      	bne.n	80025e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800257a:	2302      	movs	r3, #2
 800257c:	e033      	b.n	80025e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2224      	movs	r2, #36	; 0x24
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d141      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002602:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d131      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002610:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002616:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800261c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002628:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2232      	movs	r2, #50	; 0x32
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9b      	lsrs	r3, r3, #18
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002646:	e002      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3b01      	subs	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d102      	bne.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f2      	bne.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d158      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e057      	b.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800267a:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002684:	e04d      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268c:	d141      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d131      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2232      	movs	r2, #50	; 0x32
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	0c9b      	lsrs	r3, r3, #18
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d2:	e002      	b.n	80026da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d102      	bne.n	80026ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f2      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d112      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e011      	b.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002710:	e007      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40007000 	.word	0x40007000
 8002734:	20000010 	.word	0x20000010
 8002738:	431bde83 	.word	0x431bde83

0800273c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274a:	6093      	str	r3, [r2, #8]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e2fe      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d075      	beq.n	8002866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0x3e>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b8d      	ldr	r3, [pc, #564]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e2d9      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x74>
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a84      	ldr	r2, [pc, #528]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7b      	ldr	r2, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027f4:	4b78      	ldr	r3, [pc, #480]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a77      	ldr	r2, [pc, #476]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a74      	ldr	r2, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fe0e 	bl	8001434 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fe0a 	bl	8001434 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e29e      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xc0>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fdfa 	bl	8001434 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fdf6 	bl	8001434 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e28a      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d102      	bne.n	8002892 <HAL_RCC_OscConfig+0x136>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d002      	beq.n	8002898 <HAL_RCC_OscConfig+0x13c>
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d11f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x154>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e25d      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4946      	ldr	r1, [pc, #280]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028c4:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_RCC_OscConfig+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fd67 	bl	800139c <HAL_InitTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d043      	beq.n	800295c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e249      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fda2 	bl	8001434 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fd9e 	bl	8001434 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e232      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	492d      	ldr	r1, [pc, #180]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e01a      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800292e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fd7e 	bl	8001434 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe fd7a 	bl	8001434 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e20e      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1e0>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d041      	beq.n	80029ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01c      	beq.n	80029ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fd57 	bl	8001434 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fd53 	bl	8001434 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1e7      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ef      	beq.n	800298a <HAL_RCC_OscConfig+0x22e>
 80029aa:	e020      	b.n	80029ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fd3a 	bl	8001434 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c2:	e00d      	b.n	80029e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fd36 	bl	8001434 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d906      	bls.n	80029e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1ca      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ea      	bne.n	80029c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a6 	beq.w	8002b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a00:	4b84      	ldr	r3, [pc, #528]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2b4>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x2b6>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4a7e      	ldr	r2, [pc, #504]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
 8002a22:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <HAL_RCC_OscConfig+0x4bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x4bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a75      	ldr	r2, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x4bc>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fcf3 	bl	8001434 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fcef 	bl	8001434 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e183      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x4bc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_RCC_OscConfig+0x32e>
 8002a78:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a88:	e024      	b.n	8002ad4 <HAL_RCC_OscConfig+0x378>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d110      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x358>
 8002a92:	4b60      	ldr	r3, [pc, #384]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x378>
 8002ab4:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d016      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fcaa 	bl	8001434 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fca6 	bl	8001434 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e138      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ed      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x388>
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fc93 	bl	8001434 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fc8f 	bl	8001434 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e121      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ed      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03c      	beq.n	8002bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fc62 	bl	8001434 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b74:	f7fe fc5e 	bl	8001434 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0f2      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCC_OscConfig+0x418>
 8002b94:	e01b      	b.n	8002bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fc45 	bl	8001434 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bae:	f7fe fc41 	bl	8001434 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0d5      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ef      	bne.n	8002bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80c9 	beq.w	8002d6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	f000 8083 	beq.w	8002cec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d15e      	bne.n	8002cac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fc1b 	bl	8001434 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	e00c      	b.n	8002c1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fc17 	bl	8001434 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d905      	bls.n	8002c1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0ab      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1c:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ec      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <HAL_RCC_OscConfig+0x61c>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6a11      	ldr	r1, [r2, #32]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c42:	0212      	lsls	r2, r2, #8
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0552      	lsls	r2, r2, #21
 8002c50:	4311      	orrs	r1, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c56:	0852      	lsrs	r2, r2, #1
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0652      	lsls	r2, r2, #25
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c62:	06d2      	lsls	r2, r2, #27
 8002c64:	430a      	orrs	r2, r1
 8002c66:	4943      	ldr	r1, [pc, #268]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3d      	ldr	r2, [pc, #244]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fbd6 	bl	8001434 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fbd2 	bl	8001434 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e066      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x530>
 8002caa:	e05e      	b.n	8002d6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fbbc 	bl	8001434 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fbb8 	bl	8001434 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04c      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4924      	ldr	r1, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_OscConfig+0x620>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]
 8002cea:	e03e      	b.n	8002d6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e039      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x618>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d12c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d123      	bne.n	8002d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11b      	bne.n	8002d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d113      	bne.n	8002d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	019f800c 	.word	0x019f800c
 8002d7c:	feeefffc 	.word	0xfeeefffc

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e11e      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b91      	ldr	r3, [pc, #580]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 020f 	bic.w	r2, r3, #15
 8002dae:	498c      	ldr	r1, [pc, #560]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e106      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d073      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d129      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0f4      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002dec:	f000 f99e 	bl	800312c <RCC_GetSysClockFreqFromPLLSource>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <HAL_RCC_ClockConfig+0x268>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d93f      	bls.n	8002e7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d033      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d12f      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	4a70      	ldr	r2, [pc, #448]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e024      	b.n	8002e7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0c6      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0be      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e58:	f000 f8ce 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_RCC_ClockConfig+0x268>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d909      	bls.n	8002e7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4957      	ldr	r1, [pc, #348]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fad2 	bl	8001434 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe face 	bl	8001434 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e095      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d023      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ede:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002eec:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4936      	ldr	r1, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d105      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f22:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d21d      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	4929      	ldr	r1, [pc, #164]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f40:	f7fe fa78 	bl	8001434 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7fe fa74 	bl	8001434 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e03b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1ed      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4917      	ldr	r1, [pc, #92]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490f      	ldr	r1, [pc, #60]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002faa:	f000 f825 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490c      	ldr	r1, [pc, #48]	; (8002fec <HAL_RCC_ClockConfig+0x26c>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x270>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f9e4 	bl	800139c <HAL_InitTick>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	04c4b400 	.word	0x04c4b400
 8002fec:	08007120 	.word	0x08007120
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	20000014 	.word	0x20000014

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d102      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800300a:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e047      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d102      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	e03e      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d136      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d10c      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800304c:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003056:	68d2      	ldr	r2, [r2, #12]
 8003058:	0a12      	lsrs	r2, r2, #8
 800305a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
      break;
 8003064:	e00c      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	0a12      	lsrs	r2, r2, #8
 8003074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0e5b      	lsrs	r3, r3, #25
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	e001      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030a0:	693b      	ldr	r3, [r7, #16]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000010 	.word	0x20000010

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08007130 	.word	0x08007130

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003104:	f7ff ffda 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08007130 	.word	0x08007130

0800312c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d10c      	bne.n	800316a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003150:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800315a:	68d2      	ldr	r2, [r2, #12]
 800315c:	0a12      	lsrs	r2, r2, #8
 800315e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
    break;
 8003168:	e00c      	b.n	8003184 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	0a12      	lsrs	r2, r2, #8
 8003178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
    break;
 8003182:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0e5b      	lsrs	r3, r3, #25
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800319e:	687b      	ldr	r3, [r7, #4]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000
 80031b0:	007a1200 	.word	0x007a1200
 80031b4:	00f42400 	.word	0x00f42400

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8098 	beq.w	8003306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	; 0x58
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fe:	2301      	movs	r3, #1
 8003200:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003202:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a39      	ldr	r2, [pc, #228]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800320e:	f7fe f911 	bl	8001434 <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003214:	e009      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fe f90d 	bl	8001434 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	74fb      	strb	r3, [r7, #19]
        break;
 8003228:	e005      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ef      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d159      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01e      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	d019      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fe f8cd 	bl	8001434 <HAL_GetTick>
 800329a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329c:	e00b      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe f8c9 	bl	8001434 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d902      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	74fb      	strb	r3, [r7, #19]
            break;
 80032b4:	e006      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ec      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032e0:	e008      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	74bb      	strb	r3, [r7, #18]
 80032e6:	e005      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f4:	7c7b      	ldrb	r3, [r7, #17]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4ba6      	ldr	r3, [pc, #664]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	4aa5      	ldr	r2, [pc, #660]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003312:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 0203 	bic.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	499c      	ldr	r1, [pc, #624]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003334:	4b97      	ldr	r3, [pc, #604]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 020c 	bic.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4994      	ldr	r1, [pc, #592]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003356:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	498b      	ldr	r1, [pc, #556]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003378:	4b86      	ldr	r3, [pc, #536]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4983      	ldr	r1, [pc, #524]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800339a:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	497a      	ldr	r1, [pc, #488]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	4972      	ldr	r1, [pc, #456]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4969      	ldr	r1, [pc, #420]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	4b64      	ldr	r3, [pc, #400]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4961      	ldr	r1, [pc, #388]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003422:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	4958      	ldr	r1, [pc, #352]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d015      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	4950      	ldr	r1, [pc, #320]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003462:	d105      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003478:	2b00      	cmp	r3, #0
 800347a:	d015      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800347c:	4b45      	ldr	r3, [pc, #276]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	4942      	ldr	r1, [pc, #264]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349a:	d105      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a3c      	ldr	r2, [pc, #240]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034b4:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4934      	ldr	r1, [pc, #208]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d2:	d105      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	4926      	ldr	r1, [pc, #152]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	4918      	ldr	r1, [pc, #96]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800355c:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	490a      	ldr	r1, [pc, #40]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003588:	7cbb      	ldrb	r3, [r7, #18]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e049      	b.n	800363e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fda0 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 faa6 	bl	8003b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01b      	beq.n	80036aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0202 	mvn.w	r2, #2
 800367a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa2b 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 8003696:	e005      	b.n	80036a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa1d 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa2e 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01b      	beq.n	80036f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f06f 0204 	mvn.w	r2, #4
 80036c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa05 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 80036e2:	e005      	b.n	80036f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9f7 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa08 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01b      	beq.n	8003742 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0208 	mvn.w	r2, #8
 8003712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f9df 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 800372e:	e005      	b.n	800373c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f9d1 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9e2 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01b      	beq.n	800378e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0210 	mvn.w	r2, #16
 800375e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2208      	movs	r2, #8
 8003764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f9b9 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 800377a:	e005      	b.n	8003788 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9ab 	bl	8003ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9bc 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0201 	mvn.w	r2, #1
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd f9e1 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb68 	bl	8003eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb60 	bl	8003ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f976 	bl	8003b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0220 	mvn.w	r2, #32
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fb28 	bl	8003e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb34 	bl	8003ed8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb2c 	bl	8003eec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fb24 	bl	8003f00 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fb1c 	bl	8003f14 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0de      	b.n	8003abe <HAL_TIM_ConfigClockSource+0x1da>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800391e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800392a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	f000 80a9 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8003940:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f200 80ae 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003948:	4a60      	ldr	r2, [pc, #384]	; (8003acc <HAL_TIM_ConfigClockSource+0x1e8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f000 80a1 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8003950:	4a5e      	ldr	r2, [pc, #376]	; (8003acc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f200 80a6 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003958:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 8099 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8003960:	4a5b      	ldr	r2, [pc, #364]	; (8003ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f200 809e 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003968:	4a5a      	ldr	r2, [pc, #360]	; (8003ad4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f000 8091 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f200 8096 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800397c:	f000 8089 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 8003980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003984:	f200 808e 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d03e      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0x128>
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	f200 8087 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	f000 8086 	beq.w	8003aaa <HAL_TIM_ConfigClockSource+0x1c6>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	d87f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d01a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xfa>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d87b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d050      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x16e>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d877      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b4:	2b50      	cmp	r3, #80	; 0x50
 80039b6:	d03c      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x14e>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d873      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d058      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x18e>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d86f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d064      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d86b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d060      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d867      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05c      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d05a      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80039dc:	e062      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ee:	f000 f9b3 	bl	8003d58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	609a      	str	r2, [r3, #8]
      break;
 8003a0a:	e04f      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	f000 f99c 	bl	8003d58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2e:	609a      	str	r2, [r3, #8]
      break;
 8003a30:	e03c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f90e 	bl	8003c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2150      	movs	r1, #80	; 0x50
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f967 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a50:	e02c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 f92d 	bl	8003cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f957 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a70:	e01c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 f8ee 	bl	8003c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f947 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 f93e 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00100070 	.word	0x00100070
 8003acc:	00100040 	.word	0x00100040
 8003ad0:	00100030 	.word	0x00100030
 8003ad4:	00100020 	.word	0x00100020

08003ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a42      	ldr	r2, [pc, #264]	; (8003c44 <TIM_Base_SetConfig+0x11c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00f      	beq.n	8003b60 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d00b      	beq.n	8003b60 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <TIM_Base_SetConfig+0x120>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3e      	ldr	r2, [pc, #248]	; (8003c4c <TIM_Base_SetConfig+0x124>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <TIM_Base_SetConfig+0x128>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <TIM_Base_SetConfig+0x11c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01b      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d017      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <TIM_Base_SetConfig+0x120>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <TIM_Base_SetConfig+0x124>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00f      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <TIM_Base_SetConfig+0x128>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <TIM_Base_SetConfig+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_Base_SetConfig+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <TIM_Base_SetConfig+0x134>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_Base_SetConfig+0x11c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00f      	beq.n	8003c10 <TIM_Base_SetConfig+0xe8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <TIM_Base_SetConfig+0x128>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0xe8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0xe8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <TIM_Base_SetConfig+0x130>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0xe8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <TIM_Base_SetConfig+0x134>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d103      	bne.n	8003c18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]
  }
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 0210 	bic.w	r2, r3, #16
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f043 0307 	orr.w	r3, r3, #7
 8003d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e065      	b.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d013      	beq.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10c      	bne.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40014000 	.word	0x40014000

08003e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e042      	b.n	8003fc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fd f8fd 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fe38 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fb69 	bl	8004650 <UART_SetConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e01b      	b.n	8003fc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 feb7 	bl	8004d2c <UART_CheckIdleState>
 8003fbe:	4603      	mov	r3, r0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	; 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ff2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11b      	bne.n	800403c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800401c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 82e3 	beq.w	80045f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
      }
      return;
 800403a:	e2dd      	b.n	80045f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800403c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8123 	beq.w	800428c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004046:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800404a:	4b8d      	ldr	r3, [pc, #564]	; (8004280 <HAL_UART_IRQHandler+0x2b8>)
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004052:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004056:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_UART_IRQHandler+0x2bc>)
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8116 	beq.w	800428c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <HAL_UART_IRQHandler+0xc8>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <HAL_UART_IRQHandler+0xf8>
 800409c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2202      	movs	r2, #2
 80040ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_UART_IRQHandler+0x128>
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2204      	movs	r2, #4
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004108:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800410c:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <HAL_UART_IRQHandler+0x2b8>)
 800410e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2208      	movs	r2, #8
 800411a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f043 0208 	orr.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <HAL_UART_IRQHandler+0x196>
 8004138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8249 	beq.w	80045fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d013      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d054      	beq.n	800426c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fec9 	bl	8004f5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d146      	bne.n	8004264 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800420e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800421a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004232:	4a15      	ldr	r2, [pc, #84]	; (8004288 <HAL_UART_IRQHandler+0x2c0>)
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd fa6d 	bl	800171c <HAL_DMA_Abort_IT>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d019      	beq.n	800427c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004256:	4610      	mov	r0, r2
 8004258:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425a:	e00f      	b.n	800427c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f9e1 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004262:	e00b      	b.n	800427c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9dd 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	e007      	b.n	800427c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9d9 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800427a:	e1bf      	b.n	80045fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	bf00      	nop
    return;
 800427e:	e1bd      	b.n	80045fc <HAL_UART_IRQHandler+0x634>
 8004280:	10000001 	.word	0x10000001
 8004284:	04000120 	.word	0x04000120
 8004288:	08005027 	.word	0x08005027

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 8153 	bne.w	800453c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 814c 	beq.w	800453c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8145 	beq.w	800453c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2210      	movs	r2, #16
 80042b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	f040 80bb 	bne.w	8004440 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 818f 	beq.w	8004600 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f080 8187 	bcs.w	8004600 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 8087 	bne.w	800441e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800433a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800433e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1da      	bne.n	8004310 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800436a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3308      	adds	r3, #8
 800437a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800437e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e1      	bne.n	800435a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e3      	bne.n	8004396 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	f023 0310 	bic.w	r3, r3, #16
 80043f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004400:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800440c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e4      	bne.n	80043dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd f926 	bl	800166a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004430:	b29b      	uxth	r3, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8fd 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800443e:	e0df      	b.n	8004600 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800444c:	b29b      	uxth	r3, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80d1 	beq.w	8004604 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80cc 	beq.w	8004604 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800448e:	647b      	str	r3, [r7, #68]	; 0x44
 8004490:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	623b      	str	r3, [r7, #32]
   return(result);
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044ca:	633a      	str	r2, [r7, #48]	; 0x30
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e1      	bne.n	80044a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0310 	bic.w	r3, r3, #16
 8004506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	69b9      	ldr	r1, [r7, #24]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	617b      	str	r3, [r7, #20]
   return(result);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e4      	bne.n	80044f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800452e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f87f 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800453a:	e063      	b.n	8004604 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <HAL_UART_IRQHandler+0x59e>
 8004548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800455c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fda2 	bl	80050a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004564:	e051      	b.n	800460a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b00      	cmp	r3, #0
 8004570:	d014      	beq.n	800459c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800457e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03a      	beq.n	8004608 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
    }
    return;
 800459a:	e035      	b.n	8004608 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_UART_IRQHandler+0x5f4>
 80045a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fd4c 	bl	8005052 <UART_EndTransmit_IT>
    return;
 80045ba:	e026      	b.n	800460a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HAL_UART_IRQHandler+0x614>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fd7b 	bl	80050d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045da:	e016      	b.n	800460a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_UART_IRQHandler+0x642>
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da0c      	bge.n	800460a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fd63 	bl	80050bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045f6:	e008      	b.n	800460a <HAL_UART_IRQHandler+0x642>
      return;
 80045f8:	bf00      	nop
 80045fa:	e006      	b.n	800460a <HAL_UART_IRQHandler+0x642>
    return;
 80045fc:	bf00      	nop
 80045fe:	e004      	b.n	800460a <HAL_UART_IRQHandler+0x642>
      return;
 8004600:	bf00      	nop
 8004602:	e002      	b.n	800460a <HAL_UART_IRQHandler+0x642>
      return;
 8004604:	bf00      	nop
 8004606:	e000      	b.n	800460a <HAL_UART_IRQHandler+0x642>
    return;
 8004608:	bf00      	nop
  }
}
 800460a:	37e8      	adds	r7, #232	; 0xe8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b08c      	sub	sp, #48	; 0x30
 8004656:	af00      	add	r7, sp, #0
 8004658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4bab      	ldr	r3, [pc, #684]	; (800492c <UART_SetConfig+0x2dc>)
 8004680:	4013      	ands	r3, r2
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4aa0      	ldr	r2, [pc, #640]	; (8004930 <UART_SetConfig+0x2e0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b8:	4313      	orrs	r3, r2
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f023 010f 	bic.w	r1, r3, #15
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a91      	ldr	r2, [pc, #580]	; (8004934 <UART_SetConfig+0x2e4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d125      	bne.n	8004740 <UART_SetConfig+0xf0>
 80046f4:	4b90      	ldr	r3, [pc, #576]	; (8004938 <UART_SetConfig+0x2e8>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d81a      	bhi.n	8004738 <UART_SetConfig+0xe8>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0xb8>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004719 	.word	0x08004719
 800470c:	08004729 	.word	0x08004729
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	2301      	movs	r3, #1
 800471a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800471e:	e0d6      	b.n	80048ce <UART_SetConfig+0x27e>
 8004720:	2302      	movs	r3, #2
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004726:	e0d2      	b.n	80048ce <UART_SetConfig+0x27e>
 8004728:	2304      	movs	r3, #4
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472e:	e0ce      	b.n	80048ce <UART_SetConfig+0x27e>
 8004730:	2308      	movs	r3, #8
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004736:	e0ca      	b.n	80048ce <UART_SetConfig+0x27e>
 8004738:	2310      	movs	r3, #16
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e0c6      	b.n	80048ce <UART_SetConfig+0x27e>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7d      	ldr	r2, [pc, #500]	; (800493c <UART_SetConfig+0x2ec>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d138      	bne.n	80047bc <UART_SetConfig+0x16c>
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <UART_SetConfig+0x2e8>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d82d      	bhi.n	80047b4 <UART_SetConfig+0x164>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x110>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047b5 	.word	0x080047b5
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047b5 	.word	0x080047b5
 800477c:	080047b5 	.word	0x080047b5
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	2300      	movs	r3, #0
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479a:	e098      	b.n	80048ce <UART_SetConfig+0x27e>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e094      	b.n	80048ce <UART_SetConfig+0x27e>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e090      	b.n	80048ce <UART_SetConfig+0x27e>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b2:	e08c      	b.n	80048ce <UART_SetConfig+0x27e>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e088      	b.n	80048ce <UART_SetConfig+0x27e>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5f      	ldr	r2, [pc, #380]	; (8004940 <UART_SetConfig+0x2f0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d125      	bne.n	8004812 <UART_SetConfig+0x1c2>
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <UART_SetConfig+0x2e8>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d016      	beq.n	8004802 <UART_SetConfig+0x1b2>
 80047d4:	2b30      	cmp	r3, #48	; 0x30
 80047d6:	d818      	bhi.n	800480a <UART_SetConfig+0x1ba>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d00a      	beq.n	80047f2 <UART_SetConfig+0x1a2>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d814      	bhi.n	800480a <UART_SetConfig+0x1ba>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <UART_SetConfig+0x19a>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d008      	beq.n	80047fa <UART_SetConfig+0x1aa>
 80047e8:	e00f      	b.n	800480a <UART_SetConfig+0x1ba>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f0:	e06d      	b.n	80048ce <UART_SetConfig+0x27e>
 80047f2:	2302      	movs	r3, #2
 80047f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f8:	e069      	b.n	80048ce <UART_SetConfig+0x27e>
 80047fa:	2304      	movs	r3, #4
 80047fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004800:	e065      	b.n	80048ce <UART_SetConfig+0x27e>
 8004802:	2308      	movs	r3, #8
 8004804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004808:	e061      	b.n	80048ce <UART_SetConfig+0x27e>
 800480a:	2310      	movs	r3, #16
 800480c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004810:	e05d      	b.n	80048ce <UART_SetConfig+0x27e>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <UART_SetConfig+0x2f4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d125      	bne.n	8004868 <UART_SetConfig+0x218>
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <UART_SetConfig+0x2e8>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004826:	2bc0      	cmp	r3, #192	; 0xc0
 8004828:	d016      	beq.n	8004858 <UART_SetConfig+0x208>
 800482a:	2bc0      	cmp	r3, #192	; 0xc0
 800482c:	d818      	bhi.n	8004860 <UART_SetConfig+0x210>
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d00a      	beq.n	8004848 <UART_SetConfig+0x1f8>
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d814      	bhi.n	8004860 <UART_SetConfig+0x210>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x1f0>
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d008      	beq.n	8004850 <UART_SetConfig+0x200>
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x210>
 8004840:	2300      	movs	r3, #0
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004846:	e042      	b.n	80048ce <UART_SetConfig+0x27e>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e03e      	b.n	80048ce <UART_SetConfig+0x27e>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e03a      	b.n	80048ce <UART_SetConfig+0x27e>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e036      	b.n	80048ce <UART_SetConfig+0x27e>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e032      	b.n	80048ce <UART_SetConfig+0x27e>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	; (8004930 <UART_SetConfig+0x2e0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d12a      	bne.n	80048c8 <UART_SetConfig+0x278>
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <UART_SetConfig+0x2e8>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004880:	d01a      	beq.n	80048b8 <UART_SetConfig+0x268>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004886:	d81b      	bhi.n	80048c0 <UART_SetConfig+0x270>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d00c      	beq.n	80048a8 <UART_SetConfig+0x258>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d815      	bhi.n	80048c0 <UART_SetConfig+0x270>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x250>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d008      	beq.n	80048b0 <UART_SetConfig+0x260>
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x270>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a6:	e012      	b.n	80048ce <UART_SetConfig+0x27e>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ae:	e00e      	b.n	80048ce <UART_SetConfig+0x27e>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e00a      	b.n	80048ce <UART_SetConfig+0x27e>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e006      	b.n	80048ce <UART_SetConfig+0x27e>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e002      	b.n	80048ce <UART_SetConfig+0x27e>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <UART_SetConfig+0x2e0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	f040 80a8 	bne.w	8004a2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d834      	bhi.n	800494c <UART_SetConfig+0x2fc>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x298>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	0800494d 	.word	0x0800494d
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	0800491b 	.word	0x0800491b
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800494d 	.word	0x0800494d
 8004904:	0800494d 	.word	0x0800494d
 8004908:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe fbe2 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004912:	e021      	b.n	8004958 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <UART_SetConfig+0x2f8>)
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004918:	e01e      	b.n	8004958 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fb6d 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004920:	e01a      	b.n	8004958 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004928:	e016      	b.n	8004958 <UART_SetConfig+0x308>
 800492a:	bf00      	nop
 800492c:	cfff69f3 	.word	0xcfff69f3
 8004930:	40008000 	.word	0x40008000
 8004934:	40013800 	.word	0x40013800
 8004938:	40021000 	.word	0x40021000
 800493c:	40004400 	.word	0x40004400
 8004940:	40004800 	.word	0x40004800
 8004944:	40004c00 	.word	0x40004c00
 8004948:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004956:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 812a 	beq.w	8004bb4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	4a9e      	ldr	r2, [pc, #632]	; (8004be0 <UART_SetConfig+0x590>)
 8004966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496a:	461a      	mov	r2, r3
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004972:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d305      	bcc.n	8004990 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	429a      	cmp	r2, r3
 800498e:	d903      	bls.n	8004998 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004996:	e10d      	b.n	8004bb4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	60fa      	str	r2, [r7, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	4a8e      	ldr	r2, [pc, #568]	; (8004be0 <UART_SetConfig+0x590>)
 80049a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ba:	f7fb fc81 	bl	80002c0 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	020b      	lsls	r3, r1, #8
 80049d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049d4:	0202      	lsls	r2, r0, #8
 80049d6:	6979      	ldr	r1, [r7, #20]
 80049d8:	6849      	ldr	r1, [r1, #4]
 80049da:	0849      	lsrs	r1, r1, #1
 80049dc:	2000      	movs	r0, #0
 80049de:	460c      	mov	r4, r1
 80049e0:	4605      	mov	r5, r0
 80049e2:	eb12 0804 	adds.w	r8, r2, r4
 80049e6:	eb43 0905 	adc.w	r9, r3, r5
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	469a      	mov	sl, r3
 80049f2:	4693      	mov	fp, r2
 80049f4:	4652      	mov	r2, sl
 80049f6:	465b      	mov	r3, fp
 80049f8:	4640      	mov	r0, r8
 80049fa:	4649      	mov	r1, r9
 80049fc:	f7fb fc60 	bl	80002c0 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d308      	bcc.n	8004a22 <UART_SetConfig+0x3d2>
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d204      	bcs.n	8004a22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	e0c8      	b.n	8004bb4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a28:	e0c4      	b.n	8004bb4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a32:	d167      	bne.n	8004b04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d828      	bhi.n	8004a8e <UART_SetConfig+0x43e>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x3f4>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	08004a8f 	.word	0x08004a8f
 8004a54:	08004a7f 	.word	0x08004a7f
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a8f 	.word	0x08004a8f
 8004a60:	08004a8f 	.word	0x08004a8f
 8004a64:	08004a87 	.word	0x08004a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7fe fb34 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a6e:	e014      	b.n	8004a9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe fb46 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a76:	e010      	b.n	8004a9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <UART_SetConfig+0x594>)
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a7c:	e00d      	b.n	8004a9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fe fabb 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8004a82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a84:	e009      	b.n	8004a9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a8c:	e005      	b.n	8004a9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8089 	beq.w	8004bb4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <UART_SetConfig+0x590>)
 8004aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	441a      	add	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d916      	bls.n	8004afc <UART_SetConfig+0x4ac>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d212      	bcs.n	8004afc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	8bfa      	ldrh	r2, [r7, #30]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e05b      	b.n	8004bb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b02:	e057      	b.n	8004bb4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d828      	bhi.n	8004b5e <UART_SetConfig+0x50e>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x4c4>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe facc 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b3e:	e014      	b.n	8004b6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fade 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b46:	e010      	b.n	8004b6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <UART_SetConfig+0x594>)
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe fa53 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b54:	e009      	b.n	8004b6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b5c:	e005      	b.n	8004b6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b68:	bf00      	nop
    }

    if (pclk != 0U)
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d021      	beq.n	8004bb4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <UART_SetConfig+0x590>)
 8004b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	441a      	add	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d909      	bls.n	8004bae <UART_SetConfig+0x55e>
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d205      	bcs.n	8004bae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	e002      	b.n	8004bb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3730      	adds	r7, #48	; 0x30
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	08007138 	.word	0x08007138
 8004be4:	00f42400 	.word	0x00f42400

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b098      	sub	sp, #96	; 0x60
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc fb7a 	bl	8001434 <HAL_GetTick>
 8004d40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d12f      	bne.n	8004db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88e 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e063      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d149      	bne.n	8004e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f857 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	623b      	str	r3, [r7, #32]
   return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	617b      	str	r3, [r7, #20]
   return(result);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e012      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3758      	adds	r7, #88	; 0x58
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	e04f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d04b      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fc facb 	bl	8001434 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e04e      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d037      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d034      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d031      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d110      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f838 	bl	8004f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2208      	movs	r2, #8
 8004eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e029      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0c:	d111      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f81e 	bl	8004f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0a0      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b095      	sub	sp, #84	; 0x54
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
 8004f82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e6      	bne.n	8004f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e3      	bne.n	8004f94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d118      	bne.n	8005006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e6      	bne.n	8004fd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	675a      	str	r2, [r3, #116]	; 0x74
}
 800501a:	bf00      	nop
 800501c:	3754      	adds	r7, #84	; 0x54
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff faed 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b088      	sub	sp, #32
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60bb      	str	r3, [r7, #8]
   return(result);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fab8 	bl	8004610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_UARTEx_DisableFifoMode+0x16>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e027      	b.n	800514a <HAL_UARTEx_DisableFifoMode+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	; 0x24
 8005106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800516a:	2302      	movs	r3, #2
 800516c:	e02d      	b.n	80051ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	; 0x24
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f850 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e02d      	b.n	8005246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f812 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005270:	e031      	b.n	80052d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005272:	2308      	movs	r3, #8
 8005274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005276:	2308      	movs	r3, #8
 8005278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0e5b      	lsrs	r3, r3, #25
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0f5b      	lsrs	r3, r3, #29
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	7b3a      	ldrb	r2, [r7, #12]
 800529e:	4911      	ldr	r1, [pc, #68]	; (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052a0:	5c8a      	ldrb	r2, [r1, r2]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a6:	7b3a      	ldrb	r2, [r7, #12]
 80052a8:	490f      	ldr	r1, [pc, #60]	; (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	7b7a      	ldrb	r2, [r7, #13]
 80052bc:	4909      	ldr	r1, [pc, #36]	; (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052be:	5c8a      	ldrb	r2, [r1, r2]
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c4:	7b7a      	ldrb	r2, [r7, #13]
 80052c6:	4908      	ldr	r1, [pc, #32]	; (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	08007150 	.word	0x08007150
 80052e8:	08007158 	.word	0x08007158

080052ec <siprintf>:
 80052ec:	b40e      	push	{r1, r2, r3}
 80052ee:	b500      	push	{lr}
 80052f0:	b09c      	sub	sp, #112	; 0x70
 80052f2:	ab1d      	add	r3, sp, #116	; 0x74
 80052f4:	9002      	str	r0, [sp, #8]
 80052f6:	9006      	str	r0, [sp, #24]
 80052f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052fc:	4809      	ldr	r0, [pc, #36]	; (8005324 <siprintf+0x38>)
 80052fe:	9107      	str	r1, [sp, #28]
 8005300:	9104      	str	r1, [sp, #16]
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <siprintf+0x3c>)
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	9105      	str	r1, [sp, #20]
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	a902      	add	r1, sp, #8
 8005310:	f000 f992 	bl	8005638 <_svfiprintf_r>
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	20000068 	.word	0x20000068
 8005328:	ffff0208 	.word	0xffff0208

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <__errno>:
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <__errno+0x8>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000068 	.word	0x20000068

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f000 fc6a 	bl	8005c34 <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	0800719c 	.word	0x0800719c
 8005384:	0800719c 	.word	0x0800719c
 8005388:	0800719c 	.word	0x0800719c
 800538c:	080071a0 	.word	0x080071a0

08005390 <__retarget_lock_acquire_recursive>:
 8005390:	4770      	bx	lr

08005392 <__retarget_lock_release_recursive>:
 8005392:	4770      	bx	lr

08005394 <_free_r>:
 8005394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005396:	2900      	cmp	r1, #0
 8005398:	d044      	beq.n	8005424 <_free_r+0x90>
 800539a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f1a1 0404 	sub.w	r4, r1, #4
 80053a6:	bfb8      	it	lt
 80053a8:	18e4      	addlt	r4, r4, r3
 80053aa:	f000 f8df 	bl	800556c <__malloc_lock>
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <_free_r+0x94>)
 80053b0:	9801      	ldr	r0, [sp, #4]
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	b933      	cbnz	r3, 80053c4 <_free_r+0x30>
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	b003      	add	sp, #12
 80053bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c0:	f000 b8da 	b.w	8005578 <__malloc_unlock>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x46>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf01      	itttt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	e7ed      	b.n	80053b6 <_free_r+0x22>
 80053da:	461a      	mov	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b10b      	cbz	r3, 80053e4 <_free_r+0x50>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d9fa      	bls.n	80053da <_free_r+0x46>
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	1855      	adds	r5, r2, r1
 80053e8:	42a5      	cmp	r5, r4
 80053ea:	d10b      	bne.n	8005404 <_free_r+0x70>
 80053ec:	6824      	ldr	r4, [r4, #0]
 80053ee:	4421      	add	r1, r4
 80053f0:	1854      	adds	r4, r2, r1
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	d1e0      	bne.n	80053ba <_free_r+0x26>
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	6053      	str	r3, [r2, #4]
 80053fe:	440c      	add	r4, r1
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	e7da      	b.n	80053ba <_free_r+0x26>
 8005404:	d902      	bls.n	800540c <_free_r+0x78>
 8005406:	230c      	movs	r3, #12
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	e7d6      	b.n	80053ba <_free_r+0x26>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf04      	itt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	bf04      	itt	eq
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	6054      	str	r4, [r2, #4]
 8005422:	e7ca      	b.n	80053ba <_free_r+0x26>
 8005424:	b003      	add	sp, #12
 8005426:	bd30      	pop	{r4, r5, pc}
 8005428:	20000718 	.word	0x20000718

0800542c <sbrk_aligned>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0e      	ldr	r6, [pc, #56]	; (8005468 <sbrk_aligned+0x3c>)
 8005430:	460c      	mov	r4, r1
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	4605      	mov	r5, r0
 8005436:	b911      	cbnz	r1, 800543e <sbrk_aligned+0x12>
 8005438:	f000 fba6 	bl	8005b88 <_sbrk_r>
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fba1 	bl	8005b88 <_sbrk_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d00a      	beq.n	8005460 <sbrk_aligned+0x34>
 800544a:	1cc4      	adds	r4, r0, #3
 800544c:	f024 0403 	bic.w	r4, r4, #3
 8005450:	42a0      	cmp	r0, r4
 8005452:	d007      	beq.n	8005464 <sbrk_aligned+0x38>
 8005454:	1a21      	subs	r1, r4, r0
 8005456:	4628      	mov	r0, r5
 8005458:	f000 fb96 	bl	8005b88 <_sbrk_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d101      	bne.n	8005464 <sbrk_aligned+0x38>
 8005460:	f04f 34ff 	mov.w	r4, #4294967295
 8005464:	4620      	mov	r0, r4
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	2000071c 	.word	0x2000071c

0800546c <_malloc_r>:
 800546c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005470:	1ccd      	adds	r5, r1, #3
 8005472:	f025 0503 	bic.w	r5, r5, #3
 8005476:	3508      	adds	r5, #8
 8005478:	2d0c      	cmp	r5, #12
 800547a:	bf38      	it	cc
 800547c:	250c      	movcc	r5, #12
 800547e:	2d00      	cmp	r5, #0
 8005480:	4607      	mov	r7, r0
 8005482:	db01      	blt.n	8005488 <_malloc_r+0x1c>
 8005484:	42a9      	cmp	r1, r5
 8005486:	d905      	bls.n	8005494 <_malloc_r+0x28>
 8005488:	230c      	movs	r3, #12
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	2600      	movs	r6, #0
 800548e:	4630      	mov	r0, r6
 8005490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005568 <_malloc_r+0xfc>
 8005498:	f000 f868 	bl	800556c <__malloc_lock>
 800549c:	f8d8 3000 	ldr.w	r3, [r8]
 80054a0:	461c      	mov	r4, r3
 80054a2:	bb5c      	cbnz	r4, 80054fc <_malloc_r+0x90>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4638      	mov	r0, r7
 80054a8:	f7ff ffc0 	bl	800542c <sbrk_aligned>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	4604      	mov	r4, r0
 80054b0:	d155      	bne.n	800555e <_malloc_r+0xf2>
 80054b2:	f8d8 4000 	ldr.w	r4, [r8]
 80054b6:	4626      	mov	r6, r4
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d145      	bne.n	8005548 <_malloc_r+0xdc>
 80054bc:	2c00      	cmp	r4, #0
 80054be:	d048      	beq.n	8005552 <_malloc_r+0xe6>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	4631      	mov	r1, r6
 80054c4:	4638      	mov	r0, r7
 80054c6:	eb04 0903 	add.w	r9, r4, r3
 80054ca:	f000 fb5d 	bl	8005b88 <_sbrk_r>
 80054ce:	4581      	cmp	r9, r0
 80054d0:	d13f      	bne.n	8005552 <_malloc_r+0xe6>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	1a6d      	subs	r5, r5, r1
 80054d6:	4629      	mov	r1, r5
 80054d8:	4638      	mov	r0, r7
 80054da:	f7ff ffa7 	bl	800542c <sbrk_aligned>
 80054de:	3001      	adds	r0, #1
 80054e0:	d037      	beq.n	8005552 <_malloc_r+0xe6>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	442b      	add	r3, r5
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d038      	beq.n	8005562 <_malloc_r+0xf6>
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	42a2      	cmp	r2, r4
 80054f4:	d12b      	bne.n	800554e <_malloc_r+0xe2>
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	e00f      	b.n	800551c <_malloc_r+0xb0>
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	1b52      	subs	r2, r2, r5
 8005500:	d41f      	bmi.n	8005542 <_malloc_r+0xd6>
 8005502:	2a0b      	cmp	r2, #11
 8005504:	d917      	bls.n	8005536 <_malloc_r+0xca>
 8005506:	1961      	adds	r1, r4, r5
 8005508:	42a3      	cmp	r3, r4
 800550a:	6025      	str	r5, [r4, #0]
 800550c:	bf18      	it	ne
 800550e:	6059      	strne	r1, [r3, #4]
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	bf08      	it	eq
 8005514:	f8c8 1000 	streq.w	r1, [r8]
 8005518:	5162      	str	r2, [r4, r5]
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	4638      	mov	r0, r7
 800551e:	f104 060b 	add.w	r6, r4, #11
 8005522:	f000 f829 	bl	8005578 <__malloc_unlock>
 8005526:	f026 0607 	bic.w	r6, r6, #7
 800552a:	1d23      	adds	r3, r4, #4
 800552c:	1af2      	subs	r2, r6, r3
 800552e:	d0ae      	beq.n	800548e <_malloc_r+0x22>
 8005530:	1b9b      	subs	r3, r3, r6
 8005532:	50a3      	str	r3, [r4, r2]
 8005534:	e7ab      	b.n	800548e <_malloc_r+0x22>
 8005536:	42a3      	cmp	r3, r4
 8005538:	6862      	ldr	r2, [r4, #4]
 800553a:	d1dd      	bne.n	80054f8 <_malloc_r+0x8c>
 800553c:	f8c8 2000 	str.w	r2, [r8]
 8005540:	e7ec      	b.n	800551c <_malloc_r+0xb0>
 8005542:	4623      	mov	r3, r4
 8005544:	6864      	ldr	r4, [r4, #4]
 8005546:	e7ac      	b.n	80054a2 <_malloc_r+0x36>
 8005548:	4634      	mov	r4, r6
 800554a:	6876      	ldr	r6, [r6, #4]
 800554c:	e7b4      	b.n	80054b8 <_malloc_r+0x4c>
 800554e:	4613      	mov	r3, r2
 8005550:	e7cc      	b.n	80054ec <_malloc_r+0x80>
 8005552:	230c      	movs	r3, #12
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4638      	mov	r0, r7
 8005558:	f000 f80e 	bl	8005578 <__malloc_unlock>
 800555c:	e797      	b.n	800548e <_malloc_r+0x22>
 800555e:	6025      	str	r5, [r4, #0]
 8005560:	e7dc      	b.n	800551c <_malloc_r+0xb0>
 8005562:	605b      	str	r3, [r3, #4]
 8005564:	deff      	udf	#255	; 0xff
 8005566:	bf00      	nop
 8005568:	20000718 	.word	0x20000718

0800556c <__malloc_lock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_lock+0x8>)
 800556e:	f7ff bf0f 	b.w	8005390 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	20000714 	.word	0x20000714

08005578 <__malloc_unlock>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__malloc_unlock+0x8>)
 800557a:	f7ff bf0a 	b.w	8005392 <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	20000714 	.word	0x20000714

08005584 <__ssputs_r>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	688e      	ldr	r6, [r1, #8]
 800558a:	461f      	mov	r7, r3
 800558c:	42be      	cmp	r6, r7
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	4682      	mov	sl, r0
 8005592:	460c      	mov	r4, r1
 8005594:	4690      	mov	r8, r2
 8005596:	d82c      	bhi.n	80055f2 <__ssputs_r+0x6e>
 8005598:	898a      	ldrh	r2, [r1, #12]
 800559a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559e:	d026      	beq.n	80055ee <__ssputs_r+0x6a>
 80055a0:	6965      	ldr	r5, [r4, #20]
 80055a2:	6909      	ldr	r1, [r1, #16]
 80055a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a8:	eba3 0901 	sub.w	r9, r3, r1
 80055ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055b0:	1c7b      	adds	r3, r7, #1
 80055b2:	444b      	add	r3, r9
 80055b4:	106d      	asrs	r5, r5, #1
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf38      	it	cc
 80055ba:	461d      	movcc	r5, r3
 80055bc:	0553      	lsls	r3, r2, #21
 80055be:	d527      	bpl.n	8005610 <__ssputs_r+0x8c>
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7ff ff53 	bl	800546c <_malloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	b360      	cbz	r0, 8005624 <__ssputs_r+0xa0>
 80055ca:	6921      	ldr	r1, [r4, #16]
 80055cc:	464a      	mov	r2, r9
 80055ce:	f000 faeb 	bl	8005ba8 <memcpy>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	6126      	str	r6, [r4, #16]
 80055e0:	6165      	str	r5, [r4, #20]
 80055e2:	444e      	add	r6, r9
 80055e4:	eba5 0509 	sub.w	r5, r5, r9
 80055e8:	6026      	str	r6, [r4, #0]
 80055ea:	60a5      	str	r5, [r4, #8]
 80055ec:	463e      	mov	r6, r7
 80055ee:	42be      	cmp	r6, r7
 80055f0:	d900      	bls.n	80055f4 <__ssputs_r+0x70>
 80055f2:	463e      	mov	r6, r7
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	4632      	mov	r2, r6
 80055f8:	4641      	mov	r1, r8
 80055fa:	f000 faab 	bl	8005b54 <memmove>
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	1b9b      	subs	r3, r3, r6
 8005602:	60a3      	str	r3, [r4, #8]
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	4433      	add	r3, r6
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	2000      	movs	r0, #0
 800560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005610:	462a      	mov	r2, r5
 8005612:	f000 fad7 	bl	8005bc4 <_realloc_r>
 8005616:	4606      	mov	r6, r0
 8005618:	2800      	cmp	r0, #0
 800561a:	d1e0      	bne.n	80055de <__ssputs_r+0x5a>
 800561c:	6921      	ldr	r1, [r4, #16]
 800561e:	4650      	mov	r0, sl
 8005620:	f7ff feb8 	bl	8005394 <_free_r>
 8005624:	230c      	movs	r3, #12
 8005626:	f8ca 3000 	str.w	r3, [sl]
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
 8005636:	e7e9      	b.n	800560c <__ssputs_r+0x88>

08005638 <_svfiprintf_r>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	4698      	mov	r8, r3
 800563e:	898b      	ldrh	r3, [r1, #12]
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	b09d      	sub	sp, #116	; 0x74
 8005644:	4607      	mov	r7, r0
 8005646:	460d      	mov	r5, r1
 8005648:	4614      	mov	r4, r2
 800564a:	d50e      	bpl.n	800566a <_svfiprintf_r+0x32>
 800564c:	690b      	ldr	r3, [r1, #16]
 800564e:	b963      	cbnz	r3, 800566a <_svfiprintf_r+0x32>
 8005650:	2140      	movs	r1, #64	; 0x40
 8005652:	f7ff ff0b 	bl	800546c <_malloc_r>
 8005656:	6028      	str	r0, [r5, #0]
 8005658:	6128      	str	r0, [r5, #16]
 800565a:	b920      	cbnz	r0, 8005666 <_svfiprintf_r+0x2e>
 800565c:	230c      	movs	r3, #12
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	e0d0      	b.n	8005808 <_svfiprintf_r+0x1d0>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	616b      	str	r3, [r5, #20]
 800566a:	2300      	movs	r3, #0
 800566c:	9309      	str	r3, [sp, #36]	; 0x24
 800566e:	2320      	movs	r3, #32
 8005670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005674:	f8cd 800c 	str.w	r8, [sp, #12]
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005820 <_svfiprintf_r+0x1e8>
 800567e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005682:	f04f 0901 	mov.w	r9, #1
 8005686:	4623      	mov	r3, r4
 8005688:	469a      	mov	sl, r3
 800568a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800568e:	b10a      	cbz	r2, 8005694 <_svfiprintf_r+0x5c>
 8005690:	2a25      	cmp	r2, #37	; 0x25
 8005692:	d1f9      	bne.n	8005688 <_svfiprintf_r+0x50>
 8005694:	ebba 0b04 	subs.w	fp, sl, r4
 8005698:	d00b      	beq.n	80056b2 <_svfiprintf_r+0x7a>
 800569a:	465b      	mov	r3, fp
 800569c:	4622      	mov	r2, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	4638      	mov	r0, r7
 80056a2:	f7ff ff6f 	bl	8005584 <__ssputs_r>
 80056a6:	3001      	adds	r0, #1
 80056a8:	f000 80a9 	beq.w	80057fe <_svfiprintf_r+0x1c6>
 80056ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ae:	445a      	add	r2, fp
 80056b0:	9209      	str	r2, [sp, #36]	; 0x24
 80056b2:	f89a 3000 	ldrb.w	r3, [sl]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80a1 	beq.w	80057fe <_svfiprintf_r+0x1c6>
 80056bc:	2300      	movs	r3, #0
 80056be:	f04f 32ff 	mov.w	r2, #4294967295
 80056c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056c6:	f10a 0a01 	add.w	sl, sl, #1
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	9307      	str	r3, [sp, #28]
 80056ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056d2:	931a      	str	r3, [sp, #104]	; 0x68
 80056d4:	4654      	mov	r4, sl
 80056d6:	2205      	movs	r2, #5
 80056d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056dc:	4850      	ldr	r0, [pc, #320]	; (8005820 <_svfiprintf_r+0x1e8>)
 80056de:	f7fa fd9f 	bl	8000220 <memchr>
 80056e2:	9a04      	ldr	r2, [sp, #16]
 80056e4:	b9d8      	cbnz	r0, 800571e <_svfiprintf_r+0xe6>
 80056e6:	06d0      	lsls	r0, r2, #27
 80056e8:	bf44      	itt	mi
 80056ea:	2320      	movmi	r3, #32
 80056ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f0:	0711      	lsls	r1, r2, #28
 80056f2:	bf44      	itt	mi
 80056f4:	232b      	movmi	r3, #43	; 0x2b
 80056f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056fa:	f89a 3000 	ldrb.w	r3, [sl]
 80056fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005700:	d015      	beq.n	800572e <_svfiprintf_r+0xf6>
 8005702:	9a07      	ldr	r2, [sp, #28]
 8005704:	4654      	mov	r4, sl
 8005706:	2000      	movs	r0, #0
 8005708:	f04f 0c0a 	mov.w	ip, #10
 800570c:	4621      	mov	r1, r4
 800570e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005712:	3b30      	subs	r3, #48	; 0x30
 8005714:	2b09      	cmp	r3, #9
 8005716:	d94d      	bls.n	80057b4 <_svfiprintf_r+0x17c>
 8005718:	b1b0      	cbz	r0, 8005748 <_svfiprintf_r+0x110>
 800571a:	9207      	str	r2, [sp, #28]
 800571c:	e014      	b.n	8005748 <_svfiprintf_r+0x110>
 800571e:	eba0 0308 	sub.w	r3, r0, r8
 8005722:	fa09 f303 	lsl.w	r3, r9, r3
 8005726:	4313      	orrs	r3, r2
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	46a2      	mov	sl, r4
 800572c:	e7d2      	b.n	80056d4 <_svfiprintf_r+0x9c>
 800572e:	9b03      	ldr	r3, [sp, #12]
 8005730:	1d19      	adds	r1, r3, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	9103      	str	r1, [sp, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfbb      	ittet	lt
 800573a:	425b      	neglt	r3, r3
 800573c:	f042 0202 	orrlt.w	r2, r2, #2
 8005740:	9307      	strge	r3, [sp, #28]
 8005742:	9307      	strlt	r3, [sp, #28]
 8005744:	bfb8      	it	lt
 8005746:	9204      	strlt	r2, [sp, #16]
 8005748:	7823      	ldrb	r3, [r4, #0]
 800574a:	2b2e      	cmp	r3, #46	; 0x2e
 800574c:	d10c      	bne.n	8005768 <_svfiprintf_r+0x130>
 800574e:	7863      	ldrb	r3, [r4, #1]
 8005750:	2b2a      	cmp	r3, #42	; 0x2a
 8005752:	d134      	bne.n	80057be <_svfiprintf_r+0x186>
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	9203      	str	r2, [sp, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	bfb8      	it	lt
 8005760:	f04f 33ff 	movlt.w	r3, #4294967295
 8005764:	3402      	adds	r4, #2
 8005766:	9305      	str	r3, [sp, #20]
 8005768:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005830 <_svfiprintf_r+0x1f8>
 800576c:	7821      	ldrb	r1, [r4, #0]
 800576e:	2203      	movs	r2, #3
 8005770:	4650      	mov	r0, sl
 8005772:	f7fa fd55 	bl	8000220 <memchr>
 8005776:	b138      	cbz	r0, 8005788 <_svfiprintf_r+0x150>
 8005778:	9b04      	ldr	r3, [sp, #16]
 800577a:	eba0 000a 	sub.w	r0, r0, sl
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	4082      	lsls	r2, r0
 8005782:	4313      	orrs	r3, r2
 8005784:	3401      	adds	r4, #1
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578c:	4825      	ldr	r0, [pc, #148]	; (8005824 <_svfiprintf_r+0x1ec>)
 800578e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005792:	2206      	movs	r2, #6
 8005794:	f7fa fd44 	bl	8000220 <memchr>
 8005798:	2800      	cmp	r0, #0
 800579a:	d038      	beq.n	800580e <_svfiprintf_r+0x1d6>
 800579c:	4b22      	ldr	r3, [pc, #136]	; (8005828 <_svfiprintf_r+0x1f0>)
 800579e:	bb1b      	cbnz	r3, 80057e8 <_svfiprintf_r+0x1b0>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	3307      	adds	r3, #7
 80057a4:	f023 0307 	bic.w	r3, r3, #7
 80057a8:	3308      	adds	r3, #8
 80057aa:	9303      	str	r3, [sp, #12]
 80057ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ae:	4433      	add	r3, r6
 80057b0:	9309      	str	r3, [sp, #36]	; 0x24
 80057b2:	e768      	b.n	8005686 <_svfiprintf_r+0x4e>
 80057b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b8:	460c      	mov	r4, r1
 80057ba:	2001      	movs	r0, #1
 80057bc:	e7a6      	b.n	800570c <_svfiprintf_r+0xd4>
 80057be:	2300      	movs	r3, #0
 80057c0:	3401      	adds	r4, #1
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f04f 0c0a 	mov.w	ip, #10
 80057ca:	4620      	mov	r0, r4
 80057cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057d0:	3a30      	subs	r2, #48	; 0x30
 80057d2:	2a09      	cmp	r2, #9
 80057d4:	d903      	bls.n	80057de <_svfiprintf_r+0x1a6>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0c6      	beq.n	8005768 <_svfiprintf_r+0x130>
 80057da:	9105      	str	r1, [sp, #20]
 80057dc:	e7c4      	b.n	8005768 <_svfiprintf_r+0x130>
 80057de:	fb0c 2101 	mla	r1, ip, r1, r2
 80057e2:	4604      	mov	r4, r0
 80057e4:	2301      	movs	r3, #1
 80057e6:	e7f0      	b.n	80057ca <_svfiprintf_r+0x192>
 80057e8:	ab03      	add	r3, sp, #12
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <_svfiprintf_r+0x1f4>)
 80057f0:	a904      	add	r1, sp, #16
 80057f2:	4638      	mov	r0, r7
 80057f4:	f3af 8000 	nop.w
 80057f8:	1c42      	adds	r2, r0, #1
 80057fa:	4606      	mov	r6, r0
 80057fc:	d1d6      	bne.n	80057ac <_svfiprintf_r+0x174>
 80057fe:	89ab      	ldrh	r3, [r5, #12]
 8005800:	065b      	lsls	r3, r3, #25
 8005802:	f53f af2d 	bmi.w	8005660 <_svfiprintf_r+0x28>
 8005806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005808:	b01d      	add	sp, #116	; 0x74
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	ab03      	add	r3, sp, #12
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	462a      	mov	r2, r5
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <_svfiprintf_r+0x1f4>)
 8005816:	a904      	add	r1, sp, #16
 8005818:	4638      	mov	r0, r7
 800581a:	f000 f879 	bl	8005910 <_printf_i>
 800581e:	e7eb      	b.n	80057f8 <_svfiprintf_r+0x1c0>
 8005820:	08007160 	.word	0x08007160
 8005824:	0800716a 	.word	0x0800716a
 8005828:	00000000 	.word	0x00000000
 800582c:	08005585 	.word	0x08005585
 8005830:	08007166 	.word	0x08007166

08005834 <_printf_common>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	4616      	mov	r6, r2
 800583a:	4699      	mov	r9, r3
 800583c:	688a      	ldr	r2, [r1, #8]
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005844:	4293      	cmp	r3, r2
 8005846:	bfb8      	it	lt
 8005848:	4613      	movlt	r3, r2
 800584a:	6033      	str	r3, [r6, #0]
 800584c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005850:	4607      	mov	r7, r0
 8005852:	460c      	mov	r4, r1
 8005854:	b10a      	cbz	r2, 800585a <_printf_common+0x26>
 8005856:	3301      	adds	r3, #1
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	0699      	lsls	r1, r3, #26
 800585e:	bf42      	ittt	mi
 8005860:	6833      	ldrmi	r3, [r6, #0]
 8005862:	3302      	addmi	r3, #2
 8005864:	6033      	strmi	r3, [r6, #0]
 8005866:	6825      	ldr	r5, [r4, #0]
 8005868:	f015 0506 	ands.w	r5, r5, #6
 800586c:	d106      	bne.n	800587c <_printf_common+0x48>
 800586e:	f104 0a19 	add.w	sl, r4, #25
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	6832      	ldr	r2, [r6, #0]
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	42ab      	cmp	r3, r5
 800587a:	dc26      	bgt.n	80058ca <_printf_common+0x96>
 800587c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005880:	1e13      	subs	r3, r2, #0
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	bf18      	it	ne
 8005886:	2301      	movne	r3, #1
 8005888:	0692      	lsls	r2, r2, #26
 800588a:	d42b      	bmi.n	80058e4 <_printf_common+0xb0>
 800588c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005890:	4649      	mov	r1, r9
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	3001      	adds	r0, #1
 8005898:	d01e      	beq.n	80058d8 <_printf_common+0xa4>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	f003 0306 	and.w	r3, r3, #6
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	bf02      	ittt	eq
 80058a6:	68e5      	ldreq	r5, [r4, #12]
 80058a8:	6833      	ldreq	r3, [r6, #0]
 80058aa:	1aed      	subeq	r5, r5, r3
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	bf0c      	ite	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	2500      	movne	r5, #0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bfc4      	itt	gt
 80058ba:	1a9b      	subgt	r3, r3, r2
 80058bc:	18ed      	addgt	r5, r5, r3
 80058be:	2600      	movs	r6, #0
 80058c0:	341a      	adds	r4, #26
 80058c2:	42b5      	cmp	r5, r6
 80058c4:	d11a      	bne.n	80058fc <_printf_common+0xc8>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e008      	b.n	80058dc <_printf_common+0xa8>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4652      	mov	r2, sl
 80058ce:	4649      	mov	r1, r9
 80058d0:	4638      	mov	r0, r7
 80058d2:	47c0      	blx	r8
 80058d4:	3001      	adds	r0, #1
 80058d6:	d103      	bne.n	80058e0 <_printf_common+0xac>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	3501      	adds	r5, #1
 80058e2:	e7c6      	b.n	8005872 <_printf_common+0x3e>
 80058e4:	18e1      	adds	r1, r4, r3
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	2030      	movs	r0, #48	; 0x30
 80058ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ee:	4422      	add	r2, r4
 80058f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f8:	3302      	adds	r3, #2
 80058fa:	e7c7      	b.n	800588c <_printf_common+0x58>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4622      	mov	r2, r4
 8005900:	4649      	mov	r1, r9
 8005902:	4638      	mov	r0, r7
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d0e6      	beq.n	80058d8 <_printf_common+0xa4>
 800590a:	3601      	adds	r6, #1
 800590c:	e7d9      	b.n	80058c2 <_printf_common+0x8e>
	...

08005910 <_printf_i>:
 8005910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	7e0f      	ldrb	r7, [r1, #24]
 8005916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005918:	2f78      	cmp	r7, #120	; 0x78
 800591a:	4691      	mov	r9, r2
 800591c:	4680      	mov	r8, r0
 800591e:	460c      	mov	r4, r1
 8005920:	469a      	mov	sl, r3
 8005922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005926:	d807      	bhi.n	8005938 <_printf_i+0x28>
 8005928:	2f62      	cmp	r7, #98	; 0x62
 800592a:	d80a      	bhi.n	8005942 <_printf_i+0x32>
 800592c:	2f00      	cmp	r7, #0
 800592e:	f000 80d4 	beq.w	8005ada <_printf_i+0x1ca>
 8005932:	2f58      	cmp	r7, #88	; 0x58
 8005934:	f000 80c0 	beq.w	8005ab8 <_printf_i+0x1a8>
 8005938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800593c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005940:	e03a      	b.n	80059b8 <_printf_i+0xa8>
 8005942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005946:	2b15      	cmp	r3, #21
 8005948:	d8f6      	bhi.n	8005938 <_printf_i+0x28>
 800594a:	a101      	add	r1, pc, #4	; (adr r1, 8005950 <_printf_i+0x40>)
 800594c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005950:	080059a9 	.word	0x080059a9
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005939 	.word	0x08005939
 800595c:	08005939 	.word	0x08005939
 8005960:	08005939 	.word	0x08005939
 8005964:	08005939 	.word	0x08005939
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005939 	.word	0x08005939
 8005970:	08005939 	.word	0x08005939
 8005974:	08005939 	.word	0x08005939
 8005978:	08005939 	.word	0x08005939
 800597c:	08005ac1 	.word	0x08005ac1
 8005980:	080059e9 	.word	0x080059e9
 8005984:	08005a7b 	.word	0x08005a7b
 8005988:	08005939 	.word	0x08005939
 800598c:	08005939 	.word	0x08005939
 8005990:	08005ae3 	.word	0x08005ae3
 8005994:	08005939 	.word	0x08005939
 8005998:	080059e9 	.word	0x080059e9
 800599c:	08005939 	.word	0x08005939
 80059a0:	08005939 	.word	0x08005939
 80059a4:	08005a83 	.word	0x08005a83
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	602a      	str	r2, [r5, #0]
 80059b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b8:	2301      	movs	r3, #1
 80059ba:	e09f      	b.n	8005afc <_printf_i+0x1ec>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	0607      	lsls	r7, r0, #24
 80059c2:	f103 0104 	add.w	r1, r3, #4
 80059c6:	6029      	str	r1, [r5, #0]
 80059c8:	d501      	bpl.n	80059ce <_printf_i+0xbe>
 80059ca:	681e      	ldr	r6, [r3, #0]
 80059cc:	e003      	b.n	80059d6 <_printf_i+0xc6>
 80059ce:	0646      	lsls	r6, r0, #25
 80059d0:	d5fb      	bpl.n	80059ca <_printf_i+0xba>
 80059d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	da03      	bge.n	80059e2 <_printf_i+0xd2>
 80059da:	232d      	movs	r3, #45	; 0x2d
 80059dc:	4276      	negs	r6, r6
 80059de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e2:	485a      	ldr	r0, [pc, #360]	; (8005b4c <_printf_i+0x23c>)
 80059e4:	230a      	movs	r3, #10
 80059e6:	e012      	b.n	8005a0e <_printf_i+0xfe>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	6029      	str	r1, [r5, #0]
 80059f0:	0605      	lsls	r5, r0, #24
 80059f2:	d501      	bpl.n	80059f8 <_printf_i+0xe8>
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	e002      	b.n	80059fe <_printf_i+0xee>
 80059f8:	0641      	lsls	r1, r0, #25
 80059fa:	d5fb      	bpl.n	80059f4 <_printf_i+0xe4>
 80059fc:	881e      	ldrh	r6, [r3, #0]
 80059fe:	4853      	ldr	r0, [pc, #332]	; (8005b4c <_printf_i+0x23c>)
 8005a00:	2f6f      	cmp	r7, #111	; 0x6f
 8005a02:	bf0c      	ite	eq
 8005a04:	2308      	moveq	r3, #8
 8005a06:	230a      	movne	r3, #10
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a0e:	6865      	ldr	r5, [r4, #4]
 8005a10:	60a5      	str	r5, [r4, #8]
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	bfa2      	ittt	ge
 8005a16:	6821      	ldrge	r1, [r4, #0]
 8005a18:	f021 0104 	bicge.w	r1, r1, #4
 8005a1c:	6021      	strge	r1, [r4, #0]
 8005a1e:	b90e      	cbnz	r6, 8005a24 <_printf_i+0x114>
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	d04b      	beq.n	8005abc <_printf_i+0x1ac>
 8005a24:	4615      	mov	r5, r2
 8005a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a2e:	5dc7      	ldrb	r7, [r0, r7]
 8005a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a34:	4637      	mov	r7, r6
 8005a36:	42bb      	cmp	r3, r7
 8005a38:	460e      	mov	r6, r1
 8005a3a:	d9f4      	bls.n	8005a26 <_printf_i+0x116>
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d10b      	bne.n	8005a58 <_printf_i+0x148>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	07de      	lsls	r6, r3, #31
 8005a44:	d508      	bpl.n	8005a58 <_printf_i+0x148>
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	6861      	ldr	r1, [r4, #4]
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	bfde      	ittt	le
 8005a4e:	2330      	movle	r3, #48	; 0x30
 8005a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a58:	1b52      	subs	r2, r2, r5
 8005a5a:	6122      	str	r2, [r4, #16]
 8005a5c:	f8cd a000 	str.w	sl, [sp]
 8005a60:	464b      	mov	r3, r9
 8005a62:	aa03      	add	r2, sp, #12
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff fee4 	bl	8005834 <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d14a      	bne.n	8005b06 <_printf_i+0x1f6>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	b004      	add	sp, #16
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f043 0320 	orr.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	4833      	ldr	r0, [pc, #204]	; (8005b50 <_printf_i+0x240>)
 8005a84:	2778      	movs	r7, #120	; 0x78
 8005a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	6829      	ldr	r1, [r5, #0]
 8005a8e:	061f      	lsls	r7, r3, #24
 8005a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a94:	d402      	bmi.n	8005a9c <_printf_i+0x18c>
 8005a96:	065f      	lsls	r7, r3, #25
 8005a98:	bf48      	it	mi
 8005a9a:	b2b6      	uxthmi	r6, r6
 8005a9c:	07df      	lsls	r7, r3, #31
 8005a9e:	bf48      	it	mi
 8005aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa4:	6029      	str	r1, [r5, #0]
 8005aa6:	bf48      	it	mi
 8005aa8:	6023      	strmi	r3, [r4, #0]
 8005aaa:	b91e      	cbnz	r6, 8005ab4 <_printf_i+0x1a4>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f023 0320 	bic.w	r3, r3, #32
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	e7a7      	b.n	8005a08 <_printf_i+0xf8>
 8005ab8:	4824      	ldr	r0, [pc, #144]	; (8005b4c <_printf_i+0x23c>)
 8005aba:	e7e4      	b.n	8005a86 <_printf_i+0x176>
 8005abc:	4615      	mov	r5, r2
 8005abe:	e7bd      	b.n	8005a3c <_printf_i+0x12c>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	6826      	ldr	r6, [r4, #0]
 8005ac4:	6961      	ldr	r1, [r4, #20]
 8005ac6:	1d18      	adds	r0, r3, #4
 8005ac8:	6028      	str	r0, [r5, #0]
 8005aca:	0635      	lsls	r5, r6, #24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	d501      	bpl.n	8005ad4 <_printf_i+0x1c4>
 8005ad0:	6019      	str	r1, [r3, #0]
 8005ad2:	e002      	b.n	8005ada <_printf_i+0x1ca>
 8005ad4:	0670      	lsls	r0, r6, #25
 8005ad6:	d5fb      	bpl.n	8005ad0 <_printf_i+0x1c0>
 8005ad8:	8019      	strh	r1, [r3, #0]
 8005ada:	2300      	movs	r3, #0
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	4615      	mov	r5, r2
 8005ae0:	e7bc      	b.n	8005a5c <_printf_i+0x14c>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	1d1a      	adds	r2, r3, #4
 8005ae6:	602a      	str	r2, [r5, #0]
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	2100      	movs	r1, #0
 8005aee:	4628      	mov	r0, r5
 8005af0:	f7fa fb96 	bl	8000220 <memchr>
 8005af4:	b108      	cbz	r0, 8005afa <_printf_i+0x1ea>
 8005af6:	1b40      	subs	r0, r0, r5
 8005af8:	6060      	str	r0, [r4, #4]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	2300      	movs	r3, #0
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b04:	e7aa      	b.n	8005a5c <_printf_i+0x14c>
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	47d0      	blx	sl
 8005b10:	3001      	adds	r0, #1
 8005b12:	d0ad      	beq.n	8005a70 <_printf_i+0x160>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	079b      	lsls	r3, r3, #30
 8005b18:	d413      	bmi.n	8005b42 <_printf_i+0x232>
 8005b1a:	68e0      	ldr	r0, [r4, #12]
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	4298      	cmp	r0, r3
 8005b20:	bfb8      	it	lt
 8005b22:	4618      	movlt	r0, r3
 8005b24:	e7a6      	b.n	8005a74 <_printf_i+0x164>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4632      	mov	r2, r6
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	47d0      	blx	sl
 8005b30:	3001      	adds	r0, #1
 8005b32:	d09d      	beq.n	8005a70 <_printf_i+0x160>
 8005b34:	3501      	adds	r5, #1
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	9903      	ldr	r1, [sp, #12]
 8005b3a:	1a5b      	subs	r3, r3, r1
 8005b3c:	42ab      	cmp	r3, r5
 8005b3e:	dcf2      	bgt.n	8005b26 <_printf_i+0x216>
 8005b40:	e7eb      	b.n	8005b1a <_printf_i+0x20a>
 8005b42:	2500      	movs	r5, #0
 8005b44:	f104 0619 	add.w	r6, r4, #25
 8005b48:	e7f5      	b.n	8005b36 <_printf_i+0x226>
 8005b4a:	bf00      	nop
 8005b4c:	08007171 	.word	0x08007171
 8005b50:	08007182 	.word	0x08007182

08005b54 <memmove>:
 8005b54:	4288      	cmp	r0, r1
 8005b56:	b510      	push	{r4, lr}
 8005b58:	eb01 0402 	add.w	r4, r1, r2
 8005b5c:	d902      	bls.n	8005b64 <memmove+0x10>
 8005b5e:	4284      	cmp	r4, r0
 8005b60:	4623      	mov	r3, r4
 8005b62:	d807      	bhi.n	8005b74 <memmove+0x20>
 8005b64:	1e43      	subs	r3, r0, #1
 8005b66:	42a1      	cmp	r1, r4
 8005b68:	d008      	beq.n	8005b7c <memmove+0x28>
 8005b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b72:	e7f8      	b.n	8005b66 <memmove+0x12>
 8005b74:	4402      	add	r2, r0
 8005b76:	4601      	mov	r1, r0
 8005b78:	428a      	cmp	r2, r1
 8005b7a:	d100      	bne.n	8005b7e <memmove+0x2a>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b86:	e7f7      	b.n	8005b78 <memmove+0x24>

08005b88 <_sbrk_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d06      	ldr	r5, [pc, #24]	; (8005ba4 <_sbrk_r+0x1c>)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4604      	mov	r4, r0
 8005b90:	4608      	mov	r0, r1
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	f7fb fb78 	bl	8001288 <_sbrk>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_sbrk_r+0x1a>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_sbrk_r+0x1a>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	20000710 	.word	0x20000710

08005ba8 <memcpy>:
 8005ba8:	440a      	add	r2, r1
 8005baa:	4291      	cmp	r1, r2
 8005bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb0:	d100      	bne.n	8005bb4 <memcpy+0xc>
 8005bb2:	4770      	bx	lr
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	d1f9      	bne.n	8005bb6 <memcpy+0xe>
 8005bc2:	bd10      	pop	{r4, pc}

08005bc4 <_realloc_r>:
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	4680      	mov	r8, r0
 8005bca:	4614      	mov	r4, r2
 8005bcc:	460e      	mov	r6, r1
 8005bce:	b921      	cbnz	r1, 8005bda <_realloc_r+0x16>
 8005bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	f7ff bc49 	b.w	800546c <_malloc_r>
 8005bda:	b92a      	cbnz	r2, 8005be8 <_realloc_r+0x24>
 8005bdc:	f7ff fbda 	bl	8005394 <_free_r>
 8005be0:	4625      	mov	r5, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	f000 f81b 	bl	8005c22 <_malloc_usable_size_r>
 8005bec:	4284      	cmp	r4, r0
 8005bee:	4607      	mov	r7, r0
 8005bf0:	d802      	bhi.n	8005bf8 <_realloc_r+0x34>
 8005bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bf6:	d812      	bhi.n	8005c1e <_realloc_r+0x5a>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fc36 	bl	800546c <_malloc_r>
 8005c00:	4605      	mov	r5, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0ed      	beq.n	8005be2 <_realloc_r+0x1e>
 8005c06:	42bc      	cmp	r4, r7
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	bf28      	it	cs
 8005c0e:	463a      	movcs	r2, r7
 8005c10:	f7ff ffca 	bl	8005ba8 <memcpy>
 8005c14:	4631      	mov	r1, r6
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff fbbc 	bl	8005394 <_free_r>
 8005c1c:	e7e1      	b.n	8005be2 <_realloc_r+0x1e>
 8005c1e:	4635      	mov	r5, r6
 8005c20:	e7df      	b.n	8005be2 <_realloc_r+0x1e>

08005c22 <_malloc_usable_size_r>:
 8005c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c26:	1f18      	subs	r0, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfbc      	itt	lt
 8005c2c:	580b      	ldrlt	r3, [r1, r0]
 8005c2e:	18c0      	addlt	r0, r0, r3
 8005c30:	4770      	bx	lr
	...

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
